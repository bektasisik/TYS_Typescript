(()=>{"use strict";var e={300:(e,t)=>{var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();e.exports=t=n.fetch,n.fetch&&(t.default=n.fetch.bind(n)),t.Headers=n.Headers,t.Request=n.Request,t.Response=n.Response},674:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Attendance=void 0,t.Attendance=class{constructor(e,t,n){this._id=e,this._prayerTime=t,this._date=n}getId(){return this._id}getPrayerTime(){return this._prayerTime}getToday(){return this._date}}},406:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Student=void 0,t.Student=class{constructor(e,t,n,a){this._id=e,this._name=t,this._surname=n,this._absent=a}getId(){return this._id}getName(){return this._name}getSurname(){return this._surname}getAbsent(){return this._absent}}},669:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StudentAttendance=void 0,t.StudentAttendance=class{constructor(e,t,n){this._student=e,this._attendance=t,this._isAbsence=n}getAttendance(){return this._attendance}getStudent(){return this._student}getIsAbsence(){return this._isAbsence}getIsAbsenceToString(){return this._isAbsence?"Var":"Yok"}}},458:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StudentAttendanceDTO=void 0,t.StudentAttendanceDTO=class{constructor(e,t){this.studentId=e,this.isAbsence=t}getStudentId(){return this.studentId}getIsAbsence(){return this.isAbsence}}},711:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AttendanceService=void 0;const a=n(674);var d="http://localhost:8080/api/v1/attendances";t.AttendanceService=class{constructor(){this._attendances=[]}async getAttendances(){const e=await fetch(d,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const t=await e.json();return this._attendances=[],t.forEach((e=>{this._attendances.push(new a.Attendance(e.id,e.prayerTime,e.date))})),this._attendances}async getAttendance(e){const t=await fetch(d+"/"+e,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=await t.json();return new a.Attendance(n.id,n.prayerTime,n.date)}async isEmpty(e){return""!==e&&null!=e}async takeAttendance(e,t){if(!this.isEmpty(e))throw new Error("Prayer time cannot be empty!");const n=await fetch(d,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prayerTime:e,studentAttendanceDto:t})});if(!n.ok)throw new Error(n.statusText)}async updateAttendance(e,t,n){const a=await fetch(d+"/"+e,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:e,prayerTime:t,studentAttendanceDto:n})});if(!a.ok)throw new Error(a.statusText)}async deleteAttendance(e){const t=await fetch(d+"/"+e,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:e})});if(!t.ok)throw new Error(t.statusText)}}},590:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StudentAttendanceService=void 0;const a=n(674),d=n(406),s=n(669);var r="http://localhost:8080/api/v1/student-attendances";t.StudentAttendanceService=class{constructor(){this._studentAttendances=[]}async getStudentAttendances(){const e=await fetch(r,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const t=await e.json();return this._studentAttendances=[],this._studentAttendances=t.map((e=>new s.StudentAttendance(new d.Student(e.student.id,e.student.name,e.student.surname,e.student.absent),new a.Attendance(e.attendance.id,e.attendance.prayerTime,e.attendance.date),e.isAbsence))),this._studentAttendances}async getStudentsByAttendanceId(e){const t=await fetch(r+"/"+e+"/students",{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);return(await t.json()).map((e=>new s.StudentAttendance(new d.Student(e.student.id,e.student.name,e.student.surname,e.student.absent),new a.Attendance(e.attendance.id,e.attendance.prayerTime,e.attendance.date),e.isAbsence)))}async getAttendancesByStudentId(e){const t=await fetch(r+"/"+e+"/attendances",{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);return(await t.json()).map((e=>new s.StudentAttendance(new d.Student(e.student.id,e.student.name,e.student.surname,e.student.absent),new a.Attendance(e.attendance.id,e.attendance.prayerTime,e.attendance.date),e.isAbsence)))}}},287:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.StudentService=void 0;const d=n(406),s=a(n(300));var r="http://localhost:8080/api/v1/students",i=/^[a-zA-ZğüşıöçĞÜŞİÖÇ ]{3,20}$/,c=/^[a-zA-ZğüşıöçĞÜŞİÖÇ ]{2,20}$/;t.StudentService=class{constructor(){this._students=[]}async getStudents(){const e=await(0,s.default)(r,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const t=await e.json();return this._students=[],t.forEach((e=>{this._students.push(new d.Student(e.id,e.name,e.surname,e.absent))})),this._students}async getStudent(e){const t=await(0,s.default)(r+"/"+e,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=await t.json(),a=JSON.parse(JSON.stringify(n));return new d.Student(a.getId(),a.getName(),a.getSurname(),a.getAbsent())}async addStudent(e,t){this.validateStudent(e,t);const n=await(0,s.default)(r,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,surname:t})});if(!n.ok)throw new Error(`Error! status: ${n.status}`)}async updateStudent(e,t,n){this.validateStudent(t,n);const a=await(0,s.default)(r+"/"+e.getId(),{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({name:t,surname:n})});if(!a.ok)throw new Error(`Error! status: ${a.status}`)}async validateStudent(e,t){if(!this.isValid(e,t))throw new Error("Name or surname is not valid")}async isValid(e,t){return i.test(e)&&c.test(t)}async deleteStudent(e){const t=await(0,s.default)(r+"/"+e,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`)}}}},t={};function n(a){var d=t[a];if(void 0!==d)return d.exports;var s=t[a]={exports:{}};return e[a].call(s.exports,s,s.exports,n),s.exports}(()=>{const e=n(287),t=n(711),a=n(590),d=n(458),s=new e.StudentService,r=new t.AttendanceService,i=new a.StudentAttendanceService,c=document.getElementById("addStudentButton"),o=document.getElementById("updateStudentButton"),l=document.getElementById("takeAttendanceButton"),u=document.getElementById("updateAttendanceButton"),m=document.getElementById("nameInput"),p=document.getElementById("surnameInput"),h=document.getElementById("selectPrayerTime"),y=document.getElementsByName("selectAbsence"),g=document.getElementById("selectListWithAttendanceId"),E=document.getElementById("mySelectStudentId"),A=document.getElementById("studentListBody"),f=document.getElementById("takeAttendanceBody"),S=document.getElementById("listAttendanceBody"),b=document.getElementById("tbodyListForAttendance"),w=document.getElementById("tbodyListWithStudentId");let v,T;function k(){!async function(){A.innerHTML="",(await s.getStudents()).forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),r=document.createElement("td"),i=document.createElement("td"),l=document.createElement("td"),u=document.createElement("td"),h=document.createElement("button"),y=document.createElement("button");n.innerHTML=e.getId().toString(),a.innerText=e.getName(),d.innerText=e.getSurname(),r.innerText=e.getAbsent().toString(),h.setAttribute("class","btn btn-danger"),h.setAttribute("id","deleteButton"),h.setAttribute("data-id",e.getId().toString()),h.innerHTML='<i class="fas fa-trash-alt"></i>',y.setAttribute("class","btn btn-primary"),y.setAttribute("id","updateButton"),y.setAttribute("data-id",e.getId().toString()),y.innerHTML='<i class="fa-solid fa-edit"></i>',i.appendChild(h),l.appendChild(y),t.appendChild(n),t.appendChild(a),t.appendChild(d),t.appendChild(r),u.appendChild(i),u.appendChild(l),u.setAttribute("class","d-flex justify-content-around"),t.appendChild(u),A.appendChild(t),h.addEventListener("click",(async e=>{e.preventDefault(),console.log("Silme"),await s.deleteStudent(Number(h.dataset.id)),k(),alert("Öğrenci Silindi")})),y.addEventListener("click",(t=>{t.preventDefault(),v=e,m.value=v.getName(),p.value=v.getSurname(),y.style.display="none",h.style.display="none",o.style.display="block",c.style.display="none",o.setAttribute("data-id",v.getId().toString())}))}))}(),async function(){f.innerHTML="",(await s.getStudents()).forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),s=document.createElement("td"),r=document.createElement("select"),i=document.createElement("option"),c=document.createElement("option");n.innerHTML=e.getId().toString(),a.innerText=e.getName(),d.innerText=e.getSurname(),r.setAttribute("class","form-select"),r.setAttribute("name","selectAbsence"),r.setAttribute("aria-label","select example"),i.setAttribute("value","+"),c.setAttribute("value","-"),i.innerText="+",c.innerText="-",r.appendChild(i),r.appendChild(c),s.appendChild(r),t.appendChild(n),t.appendChild(a),t.appendChild(d),t.appendChild(s),f.appendChild(t)}))}(),async function(){S.innerHTML="",(await r.getAttendances()).forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),s=document.createElement("td"),i=document.createElement("td"),c=document.createElement("td"),o=document.createElement("button"),m=document.createElement("button");n.innerHTML=e.getId().toString(),a.innerText=e.getToday(),d.innerText=e.getPrayerTime(),o.setAttribute("class","btn btn-danger"),o.setAttribute("id","deleteButton"),o.setAttribute("data-id",e.getId().toString()),o.innerHTML='<i class="fas fa-trash-alt"></i>',m.setAttribute("class","btn btn-primary"),m.setAttribute("id","updateButton"),m.setAttribute("data-id",e.getId().toString()),m.innerHTML='<i class="fa-solid fa-edit"></i>',s.appendChild(o),i.appendChild(m),t.appendChild(n),t.appendChild(a),t.appendChild(d),c.appendChild(s),c.appendChild(i),c.setAttribute("class","d-flex justify-content-around"),t.appendChild(c),S.appendChild(t),o.addEventListener("click",(async e=>{e.preventDefault(),console.log("Silme"),await r.deleteAttendance(Number(o.dataset.id)),k(),I(),_(),alert("Yoklama Silindi")})),m.addEventListener("click",(t=>{t.preventDefault(),T=e.getId(),h.value=e.getPrayerTime(),m.style.display="none",o.style.display="none",u.style.display="block",l.style.display="none",u.setAttribute("data-id",T.toString())}))}))}()}async function I(){g.innerHTML="";const e=await r.getAttendances();(await e).forEach((e=>{const t=document.createElement("option");t.setAttribute("value",e.getId().toString()),t.innerText=e.getToday()+" "+e.getPrayerTime(),g.appendChild(t)}))}async function _(){const e=await s.getStudents();E.innerHTML="",e.forEach((e=>{const t=document.createElement("option");t.setAttribute("value",e.getId().toString()),t.innerText=e.getName()+" "+e.getSurname(),E.appendChild(t)}))}k(),I(),_(),c.addEventListener("click",(async e=>{e.preventDefault(),console.log("Ekleme");try{await s.addStudent(m.value,p.value),k(),alert(m.value+" "+p.value+"\nÖğrenci Eklendi"),m.value="",p.value=""}catch(e){alert("Talebe ADI ve SOYADI uygun formatta değil\n3-20 karakter arası sadece harf giriniz\nÖrnek: Bektaş Işık")}})),o.addEventListener("click",(async e=>{e.preventDefault(),console.log("Güncelleme");try{await s.updateStudent(v,m.value,p.value),m.value="",p.value="",c.style.display="block",o.style.display="none",k(),alert("Öğrenci Güncellendi")}catch(e){alert("Talebe ADI ve SOYADI uygun formatta değil\n3-20 karakter arası sadece harf giriniz\nÖrnek: Bektaş Işık")}})),l.addEventListener("click",(async e=>{e.preventDefault(),console.log("Yoklama alma");let t=new Array;(await s.getStudents()).forEach(((e,n)=>{t.push(new d.StudentAttendanceDTO(e.getId(),"+"===y[n].value))}));try{await r.takeAttendance(h.value,t).then((()=>{k(),I(),_(),alert(h.value+" Yoklaması Alındı")}))}catch(e){alert("Lütfen Vakti Seçiniz")}})),u.addEventListener("click",(async e=>{e.preventDefault(),console.log("Yoklama güncelleme");let t=new Array;(await s.getStudents()).forEach(((e,n)=>{t.push(new d.StudentAttendanceDTO(e.getId(),"+"===y[n].value))})),await r.updateAttendance(T,h.value,t),k(),I(),_(),l.style.display="block",u.style.display="none",alert(h.value+"Yoklaması Güncellendi")})),g.addEventListener("click",(e=>{e.preventDefault(),""!==g.value?(console.log("Yoklama Seçildi"),async function(e){console.log("Yokalmaya göre Talebe Listeleme"),b.innerHTML="";const t=await i.getStudentsByAttendanceId(e);console.log(t),t.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),s=document.createElement("td");n.innerHTML=e.getStudent().getId().toString(),a.innerHTML=e.getStudent().getName(),d.innerHTML=e.getStudent().getSurname(),s.innerHTML=e.getIsAbsenceToString(),t.appendChild(n),t.appendChild(a),t.appendChild(d),t.appendChild(s),b.appendChild(t)}))}(Number(g.value)),alert("Seçilen Yoklamanın Öğrencileri Listelendi")):alert("Yoklama Listeniz Boş. Lütfen Yoklama Alınız...")})),E.addEventListener("click",(e=>{e.preventDefault(),""!==E.value?(console.log("Talebe Seçildi"),async function(e){console.log("Talebeye göre Yoklama Listeleme"),w.innerHTML="";const t=await i.getAttendancesByStudentId(e);console.log(t),t.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td");n.innerHTML=e.getAttendance().getToday(),a.innerHTML=e.getAttendance().getPrayerTime(),d.innerHTML=e.getIsAbsenceToString(),t.appendChild(n),t.appendChild(a),t.appendChild(d),w.appendChild(t)}))}(Number(E.value)),alert("Seçilen Öğrencinin Yoklamaları Listelendi")):alert("Yoklama Listeniz Boş. Lütfen Yoklama Alınız...")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVFDLElBQUksa0JBeU5wQnhGLGVBQTJDSixHQUN2QzJGLFFBQVFDLElBQUksbUNBQ1p6QixFQUF1QkksVUFBWSxHQUNuQyxNQUFNcUQsUUFBZ0M1RSxFQUF5QitFLDBCQUEwQi9ILEdBQ3pGMkYsUUFBUUMsSUFBSWdDLEdBQ1pBLEVBQXdCL0csU0FBU1ksSUFDN0IsTUFBTWdELEVBQUt0QixTQUFTdUIsY0FBYyxNQUM1QnNELEVBQVU3RSxTQUFTdUIsY0FBYyxNQUNqQ2tDLEVBQWV6RCxTQUFTdUIsY0FBYyxNQUN0Q0ksRUFBVzNCLFNBQVN1QixjQUFjLE1BRXhDc0QsRUFBUXpELFVBQVk5QyxFQUFrQjdCLGdCQUFnQmhCLFdBQ3REZ0ksRUFBYXJDLFVBQVk5QyxFQUFrQjdCLGdCQUFnQmpCLGdCQUMzRG1HLEVBQVNQLFVBQVk5QyxFQUFrQjFCLHVCQUV2QzBFLEVBQUdjLFlBQVl5QyxHQUNmdkQsRUFBR2MsWUFBWXFCLEdBQ2ZuQyxFQUFHYyxZQUFZVCxHQUNmWCxFQUF1Qm9CLFlBQVlkLEVBQUcsR0FFOUMsQ0E1T1F3RCxDQUE0Qm5DLE9BQU9oQyxFQUFrQm1DLFFBQ3JERCxNQUFNLDhDQUdOQSxNQUFNLGlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHlzLy4vbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90eXMvLi9zcmMvZG9tYWluL2F0dGVuZGFuY2UudHMiLCJ3ZWJwYWNrOi8vdHlzLy4vc3JjL2RvbWFpbi9zdHVkZW50LnRzIiwid2VicGFjazovL3R5cy8uL3NyYy9kb21haW4vc3R1ZGVudF9hdHRlbmRhbmNlLnRzIiwid2VicGFjazovL3R5cy8uL3NyYy9kdG8vc3R1ZGVudF9hdHRlbmRhbmNlX2R0by50cyIsIndlYnBhY2s6Ly90eXMvLi9zcmMvc2VydmljZS9hdHRlbmRhbmNlX3NlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vdHlzLy4vc3JjL3NlcnZpY2Uvc3R1ZGVudF9hdHRlbmRhbmNlX3NlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vdHlzLy4vc3JjL3NlcnZpY2Uvc3R1ZGVudF9zZXJ2aWNlLnRzIiwid2VicGFjazovL3R5cy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90eXMvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgZ2V0R2xvYmFsID0gZnVuY3Rpb24gKCkge1xuXHQvLyB0aGUgb25seSByZWxpYWJsZSBtZWFucyB0byBnZXQgdGhlIGdsb2JhbCBvYmplY3QgaXNcblx0Ly8gYEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKClgXG5cdC8vIEhvd2V2ZXIsIHRoaXMgY2F1c2VzIENTUCB2aW9sYXRpb25zIGluIENocm9tZSBhcHBzLlxuXHRpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBzZWxmOyB9XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gd2luZG93OyB9XG5cdGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZ2xvYmFsOyB9XG5cdHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0Jyk7XG59XG5cbnZhciBnbG9iYWwgPSBnZXRHbG9iYWwoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZ2xvYmFsLmZldGNoO1xuXG4vLyBOZWVkZWQgZm9yIFR5cGVTY3JpcHQgYW5kIFdlYnBhY2suXG5pZiAoZ2xvYmFsLmZldGNoKSB7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IGdsb2JhbC5mZXRjaC5iaW5kKGdsb2JhbCk7XG59XG5cbmV4cG9ydHMuSGVhZGVycyA9IGdsb2JhbC5IZWFkZXJzO1xuZXhwb3J0cy5SZXF1ZXN0ID0gZ2xvYmFsLlJlcXVlc3Q7XG5leHBvcnRzLlJlc3BvbnNlID0gZ2xvYmFsLlJlc3BvbnNlOyIsImV4cG9ydCBjbGFzcyBBdHRlbmRhbmNlIHtcbiAgICBwcml2YXRlIF9pZDogbnVtYmVyO1xuICAgIHByaXZhdGUgX3ByYXllclRpbWU6IHN0cmluZztcbiAgICBwcml2YXRlIF9kYXRlOiBzdHJpbmc7XG4gICAgXG4gICAgY29uc3RydWN0b3IoaWQ6IG51bWJlciwgcHJheWVyVGltZTogc3RyaW5nLCBkYXRlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5faWQgPSBpZDtcbiAgICAgICAgdGhpcy5fcHJheWVyVGltZSA9IHByYXllclRpbWU7XG4gICAgICAgIHRoaXMuX2RhdGUgPSBkYXRlO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0SWQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0UHJheWVyVGltZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJheWVyVGltZTtcbiAgICB9XG4gICAgcHVibGljIGdldFRvZGF5KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRlO1xuICAgIH1cbn0iLCJleHBvcnQgY2xhc3MgU3R1ZGVudCB7XG4gXG4gICAgcHJpdmF0ZSBfaWQ6IG51bWJlcjtcbiAgICBwcml2YXRlIF9uYW1lOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfc3VybmFtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgX2Fic2VudDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoaWQ6IG51bWJlciwgbmFtZTogc3RyaW5nLCBzdXJuYW1lOiBzdHJpbmcsIGFic2VudDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XG4gICAgICAgIHRoaXMuX25hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLl9zdXJuYW1lID0gc3VybmFtZTtcbiAgICAgICAgdGhpcy5fYWJzZW50ID0gYWJzZW50O1xuICAgIH1cbiBcbiAgICBwdWJsaWMgZ2V0SWQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXROYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTdXJuYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdXJuYW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBYnNlbnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Fic2VudDtcbiAgICB9XG59IiwiaW1wb3J0IHsgU3R1ZGVudCB9IGZyb20gXCIuL3N0dWRlbnRcIjtcbmltcG9ydCB7IEF0dGVuZGFuY2UgfSBmcm9tIFwiLi9hdHRlbmRhbmNlXCI7XG5cbmV4cG9ydCBjbGFzcyBTdHVkZW50QXR0ZW5kYW5jZSB7XG4gICAgcHJpdmF0ZSBfc3R1ZGVudDogU3R1ZGVudDtcbiAgICBwcml2YXRlIF9hdHRlbmRhbmNlOiBBdHRlbmRhbmNlO1xuICAgIHByaXZhdGUgX2lzQWJzZW5jZTogQm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHN0dWRlbnQ6IFN0dWRlbnQsIGF0dGVuZGFuY2U6IEF0dGVuZGFuY2UsIGlzQWJzZW5jZTogQm9vbGVhbikge1xuICAgICAgICB0aGlzLl9zdHVkZW50ID0gc3R1ZGVudDtcbiAgICAgICAgdGhpcy5fYXR0ZW5kYW5jZSA9IGF0dGVuZGFuY2U7XG4gICAgICAgIHRoaXMuX2lzQWJzZW5jZSA9IGlzQWJzZW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QXR0ZW5kYW5jZSgpOkF0dGVuZGFuY2V7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdHRlbmRhbmNlO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0U3R1ZGVudCgpOlN0dWRlbnR7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHVkZW50O1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0SXNBYnNlbmNlKCk6Qm9vbGVhbntcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWJzZW5jZTtcbiAgICB9XG4gICAgcHVibGljIGdldElzQWJzZW5jZVRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0Fic2VuY2UgPyBcIlZhclwiIDogXCJZb2tcIjtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFN0dWRlbnRBdHRlbmRhbmNlRFRPIHtcbiAgICBzdHVkZW50SWQ6IG51bWJlcjtcbiAgICBpc0Fic2VuY2U6Ym9vbGVhbjtcblxuICAgIGdldFN0dWRlbnRJZCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHVkZW50SWQ7XG4gICAgfVxuICAgIGdldElzQWJzZW5jZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBYnNlbmNlO1xuICAgIH1cbiAgICBcbiAgICBjb25zdHJ1Y3RvcihzdHVkZW50SWQ6IG51bWJlciwgaXNBYnNlbmNlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuc3R1ZGVudElkID0gc3R1ZGVudElkO1xuICAgICAgICB0aGlzLmlzQWJzZW5jZSA9IGlzQWJzZW5jZTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQXR0ZW5kYW5jZSB9IGZyb20gXCIuLi9kb21haW4vYXR0ZW5kYW5jZVwiO1xuaW1wb3J0IHsgU3R1ZGVudEF0dGVuZGFuY2VEVE8gfSBmcm9tIFwiLi4vZHRvL3N0dWRlbnRfYXR0ZW5kYW5jZV9kdG9cIjtcblxudmFyIGFwaVVybDogc3RyaW5nID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hcGkvdjEvYXR0ZW5kYW5jZXMnO1xuXG5leHBvcnQgY2xhc3MgQXR0ZW5kYW5jZVNlcnZpY2Uge1xuICAgIHByaXZhdGUgX2F0dGVuZGFuY2VzOiBBcnJheTxBdHRlbmRhbmNlPiA9IFtdO1xuXG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QXR0ZW5kYW5jZXMoKTogUHJvbWlzZTxBdHRlbmRhbmNlW10+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlVcmwsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSAoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcbiAgICAgICAgdGhpcy5fYXR0ZW5kYW5jZXMgPSBbXTtcbiAgICAgICAgcmVzdWx0LmZvckVhY2goKG9iamVjdDogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9hdHRlbmRhbmNlcy5wdXNoKG5ldyBBdHRlbmRhbmNlKG9iamVjdC5pZCwgb2JqZWN0LnByYXllclRpbWUsIG9iamVjdC5kYXRlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5fYXR0ZW5kYW5jZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldEF0dGVuZGFuY2UoaWQ6IG51bWJlcik6IFByb21pc2U8QXR0ZW5kYW5jZT4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCArICcvJyArIGlkLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XG4gICAgICAgIHJldHVybiBuZXcgQXR0ZW5kYW5jZShyZXN1bHQuaWQsIHJlc3VsdC5wcmF5ZXJUaW1lLCByZXN1bHQuZGF0ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGlzRW1wdHkocHJheWVyVGltZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiBwcmF5ZXJUaW1lICE9PSAnJyAmJiBwcmF5ZXJUaW1lICE9PSB1bmRlZmluZWQgJiYgcHJheWVyVGltZSAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdGFrZUF0dGVuZGFuY2UocHJheWVyVGltZTogc3RyaW5nLCBzdHVkZW50QXR0ZW5kYW5jZUR0bzogQXJyYXk8U3R1ZGVudEF0dGVuZGFuY2VEVE8+KSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VtcHR5KHByYXllclRpbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ByYXllciB0aW1lIGNhbm5vdCBiZSBlbXB0eSEnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCwge1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBwcmF5ZXJUaW1lOiBwcmF5ZXJUaW1lLFxuICAgICAgICAgICAgICAgIHN0dWRlbnRBdHRlbmRhbmNlRHRvOiBzdHVkZW50QXR0ZW5kYW5jZUR0b1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVBdHRlbmRhbmNlKGlkOiBudW1iZXIsIHByYXllclRpbWU6IHN0cmluZywgc3R1ZGVudEF0dGVuZGFuY2VEdG86IEFycmF5PFN0dWRlbnRBdHRlbmRhbmNlRFRPPikge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCArICcvJyArIGlkLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIHByYXllclRpbWU6IHByYXllclRpbWUsXG4gICAgICAgICAgICAgICAgc3R1ZGVudEF0dGVuZGFuY2VEdG86IHN0dWRlbnRBdHRlbmRhbmNlRHRvXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZGVsZXRlQXR0ZW5kYW5jZShpZDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXBpVXJsICsgJy8nICsgaWQsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBpZDogaWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgQXR0ZW5kYW5jZSB9IGZyb20gXCIuLi9kb21haW4vYXR0ZW5kYW5jZVwiO1xuaW1wb3J0IHsgU3R1ZGVudCB9IGZyb20gXCIuLi9kb21haW4vc3R1ZGVudFwiO1xuaW1wb3J0IHsgU3R1ZGVudEF0dGVuZGFuY2UgfSBmcm9tIFwiLi4vZG9tYWluL3N0dWRlbnRfYXR0ZW5kYW5jZVwiO1xuXG52YXIgYXBpVXJsOiBzdHJpbmcgPSAnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaS92MS9zdHVkZW50LWF0dGVuZGFuY2VzJztcblxuZXhwb3J0IGNsYXNzIFN0dWRlbnRBdHRlbmRhbmNlU2VydmljZSB7XG4gICAgcHJpdmF0ZSBfc3R1ZGVudEF0dGVuZGFuY2VzOiBBcnJheTxTdHVkZW50QXR0ZW5kYW5jZT4gPSBbXTtcblxuICAgIHB1YmxpYyBhc3luYyBnZXRTdHVkZW50QXR0ZW5kYW5jZXMoKTogUHJvbWlzZTxTdHVkZW50QXR0ZW5kYW5jZVtdPiB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXBpVXJsLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XG4gICAgICAgIHRoaXMuX3N0dWRlbnRBdHRlbmRhbmNlcyA9IFtdO1xuICAgICAgICB0aGlzLl9zdHVkZW50QXR0ZW5kYW5jZXMgPSByZXN1bHQubWFwKChzdHVkZW50QXR0ZW5kYW5jZTogYW55KSA9PiBuZXcgU3R1ZGVudEF0dGVuZGFuY2UoXG4gICAgICAgICAgICBuZXcgU3R1ZGVudChzdHVkZW50QXR0ZW5kYW5jZS5zdHVkZW50LmlkLCBzdHVkZW50QXR0ZW5kYW5jZS5zdHVkZW50Lm5hbWUsIHN0dWRlbnRBdHRlbmRhbmNlLnN0dWRlbnQuc3VybmFtZSwgc3R1ZGVudEF0dGVuZGFuY2Uuc3R1ZGVudC5hYnNlbnQpLFxuICAgICAgICAgICAgbmV3IEF0dGVuZGFuY2Uoc3R1ZGVudEF0dGVuZGFuY2UuYXR0ZW5kYW5jZS5pZCwgc3R1ZGVudEF0dGVuZGFuY2UuYXR0ZW5kYW5jZS5wcmF5ZXJUaW1lLCBzdHVkZW50QXR0ZW5kYW5jZS5hdHRlbmRhbmNlLmRhdGUpLFxuICAgICAgICAgICAgc3R1ZGVudEF0dGVuZGFuY2UuaXNBYnNlbmNlKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHVkZW50QXR0ZW5kYW5jZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFN0dWRlbnRzQnlBdHRlbmRhbmNlSWQoYXR0ZW5kYW5jZUlkOiBudW1iZXIpOiBQcm9taXNlPFN0dWRlbnRBdHRlbmRhbmNlW10+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlVcmwgKyAnLycgKyBhdHRlbmRhbmNlSWQrICcvc3R1ZGVudHMnLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XG4gICAgICAgIHJldHVybiByZXN1bHQubWFwKChzdHVkZW50QXR0ZW5kYW5jZTogYW55KSA9PiBuZXcgU3R1ZGVudEF0dGVuZGFuY2UoXG4gICAgICAgICAgICBuZXcgU3R1ZGVudChzdHVkZW50QXR0ZW5kYW5jZS5zdHVkZW50LmlkLCBzdHVkZW50QXR0ZW5kYW5jZS5zdHVkZW50Lm5hbWUsIHN0dWRlbnRBdHRlbmRhbmNlLnN0dWRlbnQuc3VybmFtZSwgc3R1ZGVudEF0dGVuZGFuY2Uuc3R1ZGVudC5hYnNlbnQpLFxuICAgICAgICAgICAgbmV3IEF0dGVuZGFuY2Uoc3R1ZGVudEF0dGVuZGFuY2UuYXR0ZW5kYW5jZS5pZCwgc3R1ZGVudEF0dGVuZGFuY2UuYXR0ZW5kYW5jZS5wcmF5ZXJUaW1lLCBzdHVkZW50QXR0ZW5kYW5jZS5hdHRlbmRhbmNlLmRhdGUpLFxuICAgICAgICAgICAgc3R1ZGVudEF0dGVuZGFuY2UuaXNBYnNlbmNlKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldEF0dGVuZGFuY2VzQnlTdHVkZW50SWQoc3R1ZGVudElkOiBudW1iZXIpOiBQcm9taXNlPFN0dWRlbnRBdHRlbmRhbmNlW10+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlVcmwgKyAnLycgKyBzdHVkZW50SWQrICcvYXR0ZW5kYW5jZXMnLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XG4gICAgICAgIHJldHVybiByZXN1bHQubWFwKChzdHVkZW50QXR0ZW5kYW5jZTogYW55KSA9PiBuZXcgU3R1ZGVudEF0dGVuZGFuY2UoXG4gICAgICAgICAgICBuZXcgU3R1ZGVudChzdHVkZW50QXR0ZW5kYW5jZS5zdHVkZW50LmlkLCBzdHVkZW50QXR0ZW5kYW5jZS5zdHVkZW50Lm5hbWUsIHN0dWRlbnRBdHRlbmRhbmNlLnN0dWRlbnQuc3VybmFtZSwgc3R1ZGVudEF0dGVuZGFuY2Uuc3R1ZGVudC5hYnNlbnQpLFxuICAgICAgICAgICAgbmV3IEF0dGVuZGFuY2Uoc3R1ZGVudEF0dGVuZGFuY2UuYXR0ZW5kYW5jZS5pZCwgc3R1ZGVudEF0dGVuZGFuY2UuYXR0ZW5kYW5jZS5wcmF5ZXJUaW1lLCBzdHVkZW50QXR0ZW5kYW5jZS5hdHRlbmRhbmNlLmRhdGUpLFxuICAgICAgICAgICAgc3R1ZGVudEF0dGVuZGFuY2UuaXNBYnNlbmNlKSk7XG4gICAgfVxufSIsImltcG9ydCB7IFN0dWRlbnQgfSBmcm9tIFwiLi4vZG9tYWluL3N0dWRlbnRcIjtcbmltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcblxudmFyIGFwaVVybDogc3RyaW5nID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hcGkvdjEvc3R1ZGVudHMnO1xudmFyIHJlZ05hbWUgPSAvXlthLXpBLVrEn8O8xZ/EscO2w6fEnsOcxZ7EsMOWw4cgXXszLDIwfSQvO1xudmFyIHJlZ1N1cm5hbWUgPSAvXlthLXpBLVrEn8O8xZ/EscO2w6fEnsOcxZ7EsMOWw4cgXXsyLDIwfSQvO1xuXG5leHBvcnQgY2xhc3MgU3R1ZGVudFNlcnZpY2Uge1xuICAgIHByaXZhdGUgX3N0dWRlbnRzOiBTdHVkZW50W10gPSBbXTtcblxuICAgIHB1YmxpYyBhc3luYyBnZXRTdHVkZW50cygpOiBQcm9taXNlPFN0dWRlbnRbXT4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCwge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IChhd2FpdCByZXNwb25zZS5qc29uKCkpO1xuICAgICAgICB0aGlzLl9zdHVkZW50cyA9IFtdO1xuICAgICAgICByZXN1bHQuZm9yRWFjaCgoc3R1ZGVudDogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zdHVkZW50cy5wdXNoKG5ldyBTdHVkZW50KHN0dWRlbnQuaWQsIHN0dWRlbnQubmFtZSwgc3R1ZGVudC5zdXJuYW1lLCBzdHVkZW50LmFic2VudCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0dWRlbnRzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRTdHVkZW50KGlkOiBudW1iZXIpOiBQcm9taXNlPFN0dWRlbnQ+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlVcmwgKyAnLycgKyBpZCwge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH0vcHVibGljL1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGNvbnN0IGdldFJlc3VsdCA9IDxTdHVkZW50PkpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gICAgICAgIHJldHVybiBuZXcgU3R1ZGVudChnZXRSZXN1bHQuZ2V0SWQoKSwgZ2V0UmVzdWx0LmdldE5hbWUoKSwgZ2V0UmVzdWx0LmdldFN1cm5hbWUoKSwgZ2V0UmVzdWx0LmdldEFic2VudCgpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgYWRkU3R1ZGVudChuYW1lOiBzdHJpbmcsIHN1cm5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnZhbGlkYXRlU3R1ZGVudChuYW1lLCBzdXJuYW1lKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlVcmwsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgc3VybmFtZTogc3VybmFtZVxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVTdHVkZW50KHN0dWRlbnQ6IFN0dWRlbnQsIG5hbWU6IHN0cmluZywgc3VybmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVTdHVkZW50KG5hbWUsIHN1cm5hbWUpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCArICcvJyArIHN0dWRlbnQuZ2V0SWQoKSwge1xuICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgIHN1cm5hbWU6IHN1cm5hbWVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHZhbGlkYXRlU3R1ZGVudChuYW1lOiBzdHJpbmcsIHN1cm5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQobmFtZSwgc3VybmFtZSkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOYW1lIG9yIHN1cm5hbWUgaXMgbm90IHZhbGlkXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGlzVmFsaWQobmFtZTogc3RyaW5nLCBzdXJuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHJlZ05hbWUudGVzdChuYW1lKSAmJiByZWdTdXJuYW1lLnRlc3Qoc3VybmFtZSk7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgYXN5bmMgZGVsZXRlU3R1ZGVudChpZDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXBpVXJsICsgJy8nICsgaWQsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9XG4gICAgfVxufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJpbXBvcnQgeyBTdHVkZW50IH0gZnJvbSBcIi4vZG9tYWluL3N0dWRlbnRcIjtcblxuaW1wb3J0IHsgU3R1ZGVudFNlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlL3N0dWRlbnRfc2VydmljZVwiO1xuaW1wb3J0IHsgQXR0ZW5kYW5jZVNlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlL2F0dGVuZGFuY2Vfc2VydmljZVwiO1xuaW1wb3J0IHsgU3R1ZGVudEF0dGVuZGFuY2VTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZS9zdHVkZW50X2F0dGVuZGFuY2Vfc2VydmljZVwiO1xuXG5pbXBvcnQgeyBTdHVkZW50QXR0ZW5kYW5jZURUTyB9IGZyb20gXCIuL2R0by9zdHVkZW50X2F0dGVuZGFuY2VfZHRvXCI7XG5cbmNvbnN0IHN0dWRlbnRTZXJ2aWNlID0gbmV3IFN0dWRlbnRTZXJ2aWNlKCk7XG5jb25zdCBhdHRlbmRhbmNlU2VydmljZSA9IG5ldyBBdHRlbmRhbmNlU2VydmljZSgpO1xuY29uc3Qgc3R1ZGVudEF0dGVuZGFuY2VzZXJ2aWNlID0gbmV3IFN0dWRlbnRBdHRlbmRhbmNlU2VydmljZSgpO1xuXG5jb25zdCBhZGRTdHVkZW50QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZGRTdHVkZW50QnV0dG9uXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuY29uc3QgdXBkYXRlU3R1ZGVudEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidXBkYXRlU3R1ZGVudEJ1dHRvblwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbmNvbnN0IHRha2VBdHRlbmRhbmNlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0YWtlQXR0ZW5kYW5jZUJ1dHRvblwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbmNvbnN0IHVwZGF0ZUF0dGVuZGFuY2VCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVwZGF0ZUF0dGVuZGFuY2VCdXR0b25cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cbmNvbnN0IG5hbWVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmFtZUlucHV0XCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5jb25zdCBzdXJuYW1lSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN1cm5hbWVJbnB1dFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuXG5jb25zdCBzZWxlY3RQcmF5ZXJUaW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3RQcmF5ZXJUaW1lXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5jb25zdCBzZWxlY3RMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoXCJzZWxlY3RBYnNlbmNlXCIpIGFzIE5vZGVMaXN0T2Y8SFRNTFNlbGVjdEVsZW1lbnQ+O1xuY29uc3QgbXlTZWxlY3RBdHRlbmRhbmNlSWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlbGVjdExpc3RXaXRoQXR0ZW5kYW5jZUlkXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5jb25zdCBteVNlbGVjdFN0dWRlbnRJZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlTZWxlY3RTdHVkZW50SWRcIikgYXMgSFRNTElucHV0RWxlbWVudDtcblxuY29uc3Qgc3R1ZGVudFRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdHVkZW50TGlzdEJvZHlcIikgYXMgSFRNTFRhYmxlRWxlbWVudDtcbmNvbnN0IHRha2VBdHRlbmRhbmNlVGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRha2VBdHRlbmRhbmNlQm9keVwiKSBhcyBIVE1MVGFibGVFbGVtZW50O1xuY29uc3QgbGlzdEF0dGVuZGFuY2VCb2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaXN0QXR0ZW5kYW5jZUJvZHlcIikgYXMgSFRNTFRhYmxlRWxlbWVudDtcbmNvbnN0IHRib2R5TGlzdEZvckF0dGVuZGFuY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRib2R5TGlzdEZvckF0dGVuZGFuY2VcIikgYXMgSFRNTFRhYmxlU2VjdGlvbkVsZW1lbnQ7XG5jb25zdCB0Ym9keUxpc3RXaXRoU3R1ZGVudElkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0Ym9keUxpc3RXaXRoU3R1ZGVudElkXCIpIGFzIEhUTUxUYWJsZVNlY3Rpb25FbGVtZW50O1xuXG5zaG93TGlzdHMoKTtcbmxpc3RBdHRlbmRhbmNlc0ZvclN0dWRlbnRzKCk7XG5saXN0U3R1ZGVudHNGb3JBdHRlbmRhbmNlKCk7XG5cbmxldCBzZWxlY3RlZFN0dWRlbnQ6IFN0dWRlbnQ7XG5sZXQgc2VsZWN0ZWRBdHRlbmRhbmNlSWQ6IG51bWJlcjtcblxuXG5hZGRTdHVkZW50QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zb2xlLmxvZyhcIkVrbGVtZVwiKTtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBzdHVkZW50U2VydmljZS5hZGRTdHVkZW50KG5hbWVJbnB1dC52YWx1ZSwgc3VybmFtZUlucHV0LnZhbHVlKTtcbiAgICAgICAgc2hvd0xpc3RzKCk7XG4gICAgICAgIGFsZXJ0KG5hbWVJbnB1dC52YWx1ZSArIFwiIFwiICsgc3VybmFtZUlucHV0LnZhbHVlICsgXCJcXG7DlsSfcmVuY2kgRWtsZW5kaVwiKTtcbiAgICAgICAgbmFtZUlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgc3VybmFtZUlucHV0LnZhbHVlID0gXCJcIjtcbiAgICB9IGNhdGNoIHtcbiAgICAgICAgYWxlcnQoXCJUYWxlYmUgQURJIHZlIFNPWUFESSB1eWd1biBmb3JtYXR0YSBkZcSfaWxcXG4zLTIwIGthcmFrdGVyIGFyYXPEsSBzYWRlY2UgaGFyZiBnaXJpbml6XFxuw5ZybmVrOiBCZWt0YcWfIEnFn8Sxa1wiKTtcbiAgICB9XG59KTtcblxudXBkYXRlU3R1ZGVudEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc29sZS5sb2coXCJHw7xuY2VsbGVtZVwiKTtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBzdHVkZW50U2VydmljZS51cGRhdGVTdHVkZW50KHNlbGVjdGVkU3R1ZGVudCwgbmFtZUlucHV0LnZhbHVlLCBzdXJuYW1lSW5wdXQudmFsdWUpO1xuICAgICAgICBuYW1lSW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICBzdXJuYW1lSW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICBhZGRTdHVkZW50QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgIHVwZGF0ZVN0dWRlbnRCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICBzaG93TGlzdHMoKTtcbiAgICAgICAgYWxlcnQoXCLDlsSfcmVuY2kgR8O8bmNlbGxlbmRpXCIpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgICBhbGVydChcIlRhbGViZSBBREkgdmUgU09ZQURJIHV5Z3VuIGZvcm1hdHRhIGRlxJ9pbFxcbjMtMjAga2FyYWt0ZXIgYXJhc8SxIHNhZGVjZSBoYXJmIGdpcmluaXpcXG7DlnJuZWs6IEJla3RhxZ8gScWfxLFrXCIpO1xuICAgIH1cbn0pO1xuXG50YWtlQXR0ZW5kYW5jZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc29sZS5sb2coXCJZb2tsYW1hIGFsbWFcIik7XG4gICAgbGV0IHN0dWRlbnRBdHRlbmRhbmNlRHRvID0gbmV3IEFycmF5PFN0dWRlbnRBdHRlbmRhbmNlRFRPPigpO1xuICAgIChhd2FpdCBzdHVkZW50U2VydmljZS5nZXRTdHVkZW50cygpKS5mb3JFYWNoKChzdHVkZW50OiBTdHVkZW50LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIHN0dWRlbnRBdHRlbmRhbmNlRHRvLnB1c2gobmV3IFN0dWRlbnRBdHRlbmRhbmNlRFRPKHN0dWRlbnQuZ2V0SWQoKSwgc2VsZWN0TGlzdFtpbmRleF0udmFsdWUgPT09IFwiK1wiKSk7XG4gICAgfSk7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgYXR0ZW5kYW5jZVNlcnZpY2UudGFrZUF0dGVuZGFuY2Uoc2VsZWN0UHJheWVyVGltZS52YWx1ZSwgc3R1ZGVudEF0dGVuZGFuY2VEdG8pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgc2hvd0xpc3RzKCk7XG4gICAgICAgICAgICBsaXN0QXR0ZW5kYW5jZXNGb3JTdHVkZW50cygpO1xuICAgICAgICAgICAgbGlzdFN0dWRlbnRzRm9yQXR0ZW5kYW5jZSgpO1xuICAgICAgICAgICAgYWxlcnQoc2VsZWN0UHJheWVyVGltZS52YWx1ZSArIFwiIFlva2xhbWFzxLEgQWzEsW5kxLFcIik7XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2gge1xuICAgICAgICBhbGVydChcIkzDvHRmZW4gVmFrdGkgU2XDp2luaXpcIik7XG4gICAgfVxufSk7XG5cbnVwZGF0ZUF0dGVuZGFuY2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnNvbGUubG9nKFwiWW9rbGFtYSBnw7xuY2VsbGVtZVwiKTtcbiAgICBsZXQgc3R1ZGVudEF0dGVuZGFuY2VEdG8gPSBuZXcgQXJyYXk8U3R1ZGVudEF0dGVuZGFuY2VEVE8+KCk7XG4gICAgKGF3YWl0IHN0dWRlbnRTZXJ2aWNlLmdldFN0dWRlbnRzKCkpLmZvckVhY2goKHN0dWRlbnQ6IFN0dWRlbnQsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgc3R1ZGVudEF0dGVuZGFuY2VEdG8ucHVzaChuZXcgU3R1ZGVudEF0dGVuZGFuY2VEVE8oc3R1ZGVudC5nZXRJZCgpLCBzZWxlY3RMaXN0W2luZGV4XS52YWx1ZSA9PT0gXCIrXCIpKTtcbiAgICB9KVxuICAgIGF3YWl0IGF0dGVuZGFuY2VTZXJ2aWNlLnVwZGF0ZUF0dGVuZGFuY2Uoc2VsZWN0ZWRBdHRlbmRhbmNlSWQsIHNlbGVjdFByYXllclRpbWUudmFsdWUsIHN0dWRlbnRBdHRlbmRhbmNlRHRvKTtcbiAgICBzaG93TGlzdHMoKTtcbiAgICBsaXN0QXR0ZW5kYW5jZXNGb3JTdHVkZW50cygpO1xuICAgIGxpc3RTdHVkZW50c0ZvckF0dGVuZGFuY2UoKTtcbiAgICB0YWtlQXR0ZW5kYW5jZUJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgIHVwZGF0ZUF0dGVuZGFuY2VCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIGFsZXJ0KHNlbGVjdFByYXllclRpbWUudmFsdWUgKyBcIllva2xhbWFzxLEgR8O8bmNlbGxlbmRpXCIpO1xufSk7XG5cbm15U2VsZWN0QXR0ZW5kYW5jZUlkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoIShteVNlbGVjdEF0dGVuZGFuY2VJZC52YWx1ZSA9PT0gXCJcIikpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJZb2tsYW1hIFNlw6dpbGRpXCIpO1xuICAgICAgICBsaXN0U3R1ZGVudHNXaXRoQXR0ZW5kYW5jZUlkKE51bWJlcihteVNlbGVjdEF0dGVuZGFuY2VJZC52YWx1ZSkpO1xuICAgICAgICBhbGVydChcIlNlw6dpbGVuIFlva2xhbWFuxLFuIMOWxJ9yZW5jaWxlcmkgTGlzdGVsZW5kaVwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFsZXJ0KFwiWW9rbGFtYSBMaXN0ZW5peiBCb8WfLiBMw7x0ZmVuIFlva2xhbWEgQWzEsW7EsXouLi5cIik7XG4gICAgfVxufSk7XG5cbm15U2VsZWN0U3R1ZGVudElkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoIShteVNlbGVjdFN0dWRlbnRJZC52YWx1ZSA9PT0gXCJcIikpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJUYWxlYmUgU2XDp2lsZGlcIik7XG4gICAgICAgIGxpc3RBdHRlbmRhbmNlV2l0aFN0dWRlbnRJZChOdW1iZXIobXlTZWxlY3RTdHVkZW50SWQudmFsdWUpKTtcbiAgICAgICAgYWxlcnQoXCJTZcOnaWxlbiDDlsSfcmVuY2luaW4gWW9rbGFtYWxhcsSxIExpc3RlbGVuZGlcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhbGVydChcIllva2xhbWEgTGlzdGVuaXogQm/Fny4gTMO8dGZlbiBZb2tsYW1hIEFsxLFuxLF6Li4uXCIpO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBzaG93TGlzdHMoKSB7XG4gICAgc2hvd1N0dWRlbnRMaXN0KCk7XG4gICAgdGFrZUF0dGVuZGFuY2VMaXN0KCk7XG4gICAgbGlzdEF0dGVuZGFuY2UoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2hvd1N0dWRlbnRMaXN0KCkge1xuICAgIHN0dWRlbnRUYWJsZS5pbm5lckhUTUwgPSBcIlwiO1xuICAgIChhd2FpdCBzdHVkZW50U2VydmljZS5nZXRTdHVkZW50cygpKS5mb3JFYWNoKChzdHVkZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICAgICAgICBjb25zdCB0ZElkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCB0ZE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkU3VybmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgdGRBYnNlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkRGVsZXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCB0ZFVwZGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgdGRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIGNvbnN0IHVwZGF0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG5cbiAgICAgICAgdGRJZC5pbm5lckhUTUwgPSBzdHVkZW50LmdldElkKCkudG9TdHJpbmcoKTtcbiAgICAgICAgdGROYW1lLmlubmVyVGV4dCA9IHN0dWRlbnQuZ2V0TmFtZSgpO1xuICAgICAgICB0ZFN1cm5hbWUuaW5uZXJUZXh0ID0gc3R1ZGVudC5nZXRTdXJuYW1lKCk7XG4gICAgICAgIHRkQWJzZW50LmlubmVyVGV4dCA9IHN0dWRlbnQuZ2V0QWJzZW50KCkudG9TdHJpbmcoKTtcbiAgICAgICAgZGVsZXRlQnV0dG9uLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiYnRuIGJ0bi1kYW5nZXJcIik7XG4gICAgICAgIGRlbGV0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImRlbGV0ZUJ1dHRvblwiKTtcbiAgICAgICAgZGVsZXRlQnV0dG9uLnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIiwgc3R1ZGVudC5nZXRJZCgpLnRvU3RyaW5nKCkpO1xuICAgICAgICBkZWxldGVCdXR0b24uaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmFzIGZhLXRyYXNoLWFsdFwiPjwvaT4nO1xuICAgICAgICB1cGRhdGVCdXR0b24uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJidG4gYnRuLXByaW1hcnlcIik7XG4gICAgICAgIHVwZGF0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInVwZGF0ZUJ1dHRvblwiKTtcbiAgICAgICAgdXBkYXRlQnV0dG9uLnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIiwgc3R1ZGVudC5nZXRJZCgpLnRvU3RyaW5nKCkpO1xuICAgICAgICB1cGRhdGVCdXR0b24uaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmEtc29saWQgZmEtZWRpdFwiPjwvaT4nO1xuICAgICAgICB0ZERlbGV0ZS5hcHBlbmRDaGlsZChkZWxldGVCdXR0b24pO1xuICAgICAgICB0ZFVwZGF0ZS5hcHBlbmRDaGlsZCh1cGRhdGVCdXR0b24pO1xuICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZElkKTtcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGROYW1lKTtcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRTdXJuYW1lKTtcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRBYnNlbnQpO1xuICAgICAgICB0ZEJ1dHRvbi5hcHBlbmRDaGlsZCh0ZERlbGV0ZSk7XG4gICAgICAgIHRkQnV0dG9uLmFwcGVuZENoaWxkKHRkVXBkYXRlKTtcbiAgICAgICAgdGRCdXR0b24uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJkLWZsZXgganVzdGlmeS1jb250ZW50LWFyb3VuZFwiKTtcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRCdXR0b24pO1xuICAgICAgICBzdHVkZW50VGFibGUuYXBwZW5kQ2hpbGQodHIpO1xuXG4gICAgICAgIGRlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2lsbWVcIik7XG4gICAgICAgICAgICBhd2FpdCBzdHVkZW50U2VydmljZS5kZWxldGVTdHVkZW50KE51bWJlcihkZWxldGVCdXR0b24uZGF0YXNldC5pZCkpO1xuICAgICAgICAgICAgc2hvd0xpc3RzKCk7XG4gICAgICAgICAgICBhbGVydChcIsOWxJ9yZW5jaSBTaWxpbmRpXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdXBkYXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgc2VsZWN0ZWRTdHVkZW50ID0gc3R1ZGVudDtcbiAgICAgICAgICAgIG5hbWVJbnB1dC52YWx1ZSA9IHNlbGVjdGVkU3R1ZGVudC5nZXROYW1lKCk7XG4gICAgICAgICAgICBzdXJuYW1lSW5wdXQudmFsdWUgPSBzZWxlY3RlZFN0dWRlbnQuZ2V0U3VybmFtZSgpO1xuICAgICAgICAgICAgdXBkYXRlQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIGRlbGV0ZUJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB1cGRhdGVTdHVkZW50QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICBhZGRTdHVkZW50QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIHVwZGF0ZVN0dWRlbnRCdXR0b24uc2V0QXR0cmlidXRlKFwiZGF0YS1pZFwiLCBzZWxlY3RlZFN0dWRlbnQuZ2V0SWQoKS50b1N0cmluZygpKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHRha2VBdHRlbmRhbmNlTGlzdCgpIHtcbiAgICB0YWtlQXR0ZW5kYW5jZVRhYmxlLmlubmVySFRNTCA9IFwiXCI7XG4gICAgKGF3YWl0IHN0dWRlbnRTZXJ2aWNlLmdldFN0dWRlbnRzKCkpLmZvckVhY2goKHN0dWRlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG4gICAgICAgIGNvbnN0IHRkSWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgdGRTdXJuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCB0ZE9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcbiAgICAgICAgY29uc3Qgb3B0aW9uMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgIGNvbnN0IG9wdGlvbjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuXG4gICAgICAgIHRkSWQuaW5uZXJIVE1MID0gc3R1ZGVudC5nZXRJZCgpLnRvU3RyaW5nKCk7XG4gICAgICAgIHRkTmFtZS5pbm5lclRleHQgPSBzdHVkZW50LmdldE5hbWUoKTtcbiAgICAgICAgdGRTdXJuYW1lLmlubmVyVGV4dCA9IHN0dWRlbnQuZ2V0U3VybmFtZSgpO1xuICAgICAgICBzZWxlY3Quc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJmb3JtLXNlbGVjdFwiKTtcbiAgICAgICAgc2VsZWN0LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJzZWxlY3RBYnNlbmNlXCIpO1xuICAgICAgICBzZWxlY3Quc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBcInNlbGVjdCBleGFtcGxlXCIpO1xuICAgICAgICBvcHRpb24xLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiK1wiKTtcbiAgICAgICAgb3B0aW9uMi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIi1cIik7XG4gICAgICAgIG9wdGlvbjEuaW5uZXJUZXh0ID0gXCIrXCI7XG4gICAgICAgIG9wdGlvbjIuaW5uZXJUZXh0ID0gXCItXCI7XG5cbiAgICAgICAgc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbjEpO1xuICAgICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uMik7XG4gICAgICAgIHRkT3B0aW9uLmFwcGVuZENoaWxkKHNlbGVjdCk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkSWQpO1xuICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZE5hbWUpO1xuICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZFN1cm5hbWUpO1xuICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZE9wdGlvbik7XG4gICAgICAgIHRha2VBdHRlbmRhbmNlVGFibGUuYXBwZW5kQ2hpbGQodHIpO1xuICAgIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsaXN0QXR0ZW5kYW5jZSgpIHtcbiAgICBsaXN0QXR0ZW5kYW5jZUJvZHkuaW5uZXJIVE1MID0gXCJcIjtcblxuICAgIChhd2FpdCBhdHRlbmRhbmNlU2VydmljZS5nZXRBdHRlbmRhbmNlcygpKS5mb3JFYWNoKChhdHRlbmRhbmNlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICAgICAgICBjb25zdCB0ZElkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCB0ZERhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkUHJheWVyVGltZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgdGREZWxldGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkVXBkYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCB0ZEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgZGVsZXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgY29uc3QgdXBkYXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblxuICAgICAgICB0ZElkLmlubmVySFRNTCA9IGF0dGVuZGFuY2UuZ2V0SWQoKS50b1N0cmluZygpO1xuICAgICAgICB0ZERhdGUuaW5uZXJUZXh0ID0gYXR0ZW5kYW5jZS5nZXRUb2RheSgpO1xuICAgICAgICB0ZFByYXllclRpbWUuaW5uZXJUZXh0ID0gYXR0ZW5kYW5jZS5nZXRQcmF5ZXJUaW1lKCk7XG4gICAgICAgIGRlbGV0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImJ0biBidG4tZGFuZ2VyXCIpO1xuICAgICAgICBkZWxldGVCdXR0b24uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJkZWxldGVCdXR0b25cIik7XG4gICAgICAgIGRlbGV0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIsIGF0dGVuZGFuY2UuZ2V0SWQoKS50b1N0cmluZygpKTtcbiAgICAgICAgZGVsZXRlQnV0dG9uLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhcyBmYS10cmFzaC1hbHRcIj48L2k+JztcbiAgICAgICAgdXBkYXRlQnV0dG9uLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiYnRuIGJ0bi1wcmltYXJ5XCIpO1xuICAgICAgICB1cGRhdGVCdXR0b24uc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJ1cGRhdGVCdXR0b25cIik7XG4gICAgICAgIHVwZGF0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIsIGF0dGVuZGFuY2UuZ2V0SWQoKS50b1N0cmluZygpKTtcbiAgICAgICAgdXBkYXRlQnV0dG9uLmlubmVySFRNTCA9ICc8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWVkaXRcIj48L2k+JztcbiAgICAgICAgdGREZWxldGUuYXBwZW5kQ2hpbGQoZGVsZXRlQnV0dG9uKTtcbiAgICAgICAgdGRVcGRhdGUuYXBwZW5kQ2hpbGQodXBkYXRlQnV0dG9uKTtcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRJZCk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkRGF0ZSk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkUHJheWVyVGltZSk7XG4gICAgICAgIHRkQnV0dG9uLmFwcGVuZENoaWxkKHRkRGVsZXRlKTtcbiAgICAgICAgdGRCdXR0b24uYXBwZW5kQ2hpbGQodGRVcGRhdGUpO1xuICAgICAgICB0ZEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYXJvdW5kXCIpO1xuICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZEJ1dHRvbik7XG4gICAgICAgIGxpc3RBdHRlbmRhbmNlQm9keS5hcHBlbmRDaGlsZCh0cik7XG5cbiAgICAgICAgZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTaWxtZVwiKTtcbiAgICAgICAgICAgIGF3YWl0IGF0dGVuZGFuY2VTZXJ2aWNlLmRlbGV0ZUF0dGVuZGFuY2UoTnVtYmVyKGRlbGV0ZUJ1dHRvbi5kYXRhc2V0LmlkKSk7XG4gICAgICAgICAgICBzaG93TGlzdHMoKTtcbiAgICAgICAgICAgIGxpc3RBdHRlbmRhbmNlc0ZvclN0dWRlbnRzKCk7XG4gICAgICAgICAgICBsaXN0U3R1ZGVudHNGb3JBdHRlbmRhbmNlKCk7XG4gICAgICAgICAgICBhbGVydChcIllva2xhbWEgU2lsaW5kaVwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHVwZGF0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHNlbGVjdGVkQXR0ZW5kYW5jZUlkID0gYXR0ZW5kYW5jZS5nZXRJZCgpO1xuICAgICAgICAgICAgc2VsZWN0UHJheWVyVGltZS52YWx1ZSA9IGF0dGVuZGFuY2UuZ2V0UHJheWVyVGltZSgpO1xuICAgICAgICAgICAgdXBkYXRlQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIGRlbGV0ZUJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB1cGRhdGVBdHRlbmRhbmNlQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICB0YWtlQXR0ZW5kYW5jZUJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB1cGRhdGVBdHRlbmRhbmNlQnV0dG9uLnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIiwgc2VsZWN0ZWRBdHRlbmRhbmNlSWQudG9TdHJpbmcoKSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG4vKiBTZcOnaWxlbiB5b2tsYW1hIGxpc3Rlc2luaW5pbiB0YWxlYmVsZXJpbmkgZ8O2c3RlcmlyLiAqL1xuYXN5bmMgZnVuY3Rpb24gbGlzdEF0dGVuZGFuY2VzRm9yU3R1ZGVudHMoKSB7XG4gICAgbXlTZWxlY3RBdHRlbmRhbmNlSWQuaW5uZXJIVE1MID0gXCJcIjtcbiAgICBjb25zdCBhdHRlbmRhbmNlTGlzdCA9IGF3YWl0IGF0dGVuZGFuY2VTZXJ2aWNlLmdldEF0dGVuZGFuY2VzKCk7XG4gICAgKGF3YWl0IGF0dGVuZGFuY2VMaXN0KS5mb3JFYWNoKChhdHRlbmRhbmNlKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBhdHRlbmRhbmNlLmdldElkKCkudG9TdHJpbmcoKSk7XG4gICAgICAgIG9wdGlvbi5pbm5lclRleHQgPSBhdHRlbmRhbmNlLmdldFRvZGF5KCkgKyBcIiBcIiArIGF0dGVuZGFuY2UuZ2V0UHJheWVyVGltZSgpO1xuICAgICAgICBteVNlbGVjdEF0dGVuZGFuY2VJZC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgIH0pO1xuXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxpc3RTdHVkZW50c1dpdGhBdHRlbmRhbmNlSWQoYXR0ZW5kYW5jZUlkOiBudW1iZXIpIHtcbiAgICBjb25zb2xlLmxvZyhcIllva2FsbWF5YSBnw7ZyZSBUYWxlYmUgTGlzdGVsZW1lXCIpO1xuICAgIHRib2R5TGlzdEZvckF0dGVuZGFuY2UuaW5uZXJIVE1MID0gXCJcIjtcbiAgICBjb25zdCBzdHVkZW50QXR0ZW5kYW5jZUZpbHRlciA9IGF3YWl0IHN0dWRlbnRBdHRlbmRhbmNlc2VydmljZS5nZXRTdHVkZW50c0J5QXR0ZW5kYW5jZUlkKGF0dGVuZGFuY2VJZCk7XG4gICAgY29uc29sZS5sb2coc3R1ZGVudEF0dGVuZGFuY2VGaWx0ZXIpO1xuICAgIHN0dWRlbnRBdHRlbmRhbmNlRmlsdGVyLmZvckVhY2goKHN0dWRlbnRBdHRlbmRhbmNlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICAgICAgICBjb25zdCB0ZElkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCB0ZE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkU3VybmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgdGRBYnNlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG5cbiAgICAgICAgdGRJZC5pbm5lckhUTUwgPSBzdHVkZW50QXR0ZW5kYW5jZS5nZXRTdHVkZW50KCkuZ2V0SWQoKS50b1N0cmluZygpO1xuICAgICAgICB0ZE5hbWUuaW5uZXJIVE1MID0gc3R1ZGVudEF0dGVuZGFuY2UuZ2V0U3R1ZGVudCgpLmdldE5hbWUoKTtcbiAgICAgICAgdGRTdXJuYW1lLmlubmVySFRNTCA9IHN0dWRlbnRBdHRlbmRhbmNlLmdldFN0dWRlbnQoKS5nZXRTdXJuYW1lKCk7XG4gICAgICAgIHRkQWJzZW50LmlubmVySFRNTCA9IHN0dWRlbnRBdHRlbmRhbmNlLmdldElzQWJzZW5jZVRvU3RyaW5nKCk7XG5cbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRJZCk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkTmFtZSk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkU3VybmFtZSk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkQWJzZW50KTtcbiAgICAgICAgdGJvZHlMaXN0Rm9yQXR0ZW5kYW5jZS5hcHBlbmRDaGlsZCh0cik7XG4gICAgfSk7XG59XG5cbi8qIFNlw6dpbGVuIMO2xJ9yZW5jaW5pbiB5b2tsYW1hIGxpc3Rlc2luaSBnw7ZzdGVyaXIuICovXG5hc3luYyBmdW5jdGlvbiBsaXN0U3R1ZGVudHNGb3JBdHRlbmRhbmNlKCkge1xuICAgIGNvbnN0IHN0dWRlbnRMaXN0ID0gYXdhaXQgc3R1ZGVudFNlcnZpY2UuZ2V0U3R1ZGVudHMoKTtcbiAgICBteVNlbGVjdFN0dWRlbnRJZC5pbm5lckhUTUwgPSBcIlwiO1xuICAgIHN0dWRlbnRMaXN0LmZvckVhY2goKHN0dWRlbnQpID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIHN0dWRlbnQuZ2V0SWQoKS50b1N0cmluZygpKTtcbiAgICAgICAgb3B0aW9uLmlubmVyVGV4dCA9IHN0dWRlbnQuZ2V0TmFtZSgpICsgXCIgXCIgKyBzdHVkZW50LmdldFN1cm5hbWUoKTtcbiAgICAgICAgbXlTZWxlY3RTdHVkZW50SWQuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICB9KTtcblxufVxuXG5hc3luYyBmdW5jdGlvbiBsaXN0QXR0ZW5kYW5jZVdpdGhTdHVkZW50SWQoc3R1ZGVudElkOiBudW1iZXIpIHtcbiAgICBjb25zb2xlLmxvZyhcIlRhbGViZXllIGfDtnJlIFlva2xhbWEgTGlzdGVsZW1lXCIpO1xuICAgIHRib2R5TGlzdFdpdGhTdHVkZW50SWQuaW5uZXJIVE1MID0gXCJcIjtcbiAgICBjb25zdCBzdHVkZW50QXR0ZW5kYW5jZUZpbHRlciA9IGF3YWl0IHN0dWRlbnRBdHRlbmRhbmNlc2VydmljZS5nZXRBdHRlbmRhbmNlc0J5U3R1ZGVudElkKHN0dWRlbnRJZCk7XG4gICAgY29uc29sZS5sb2coc3R1ZGVudEF0dGVuZGFuY2VGaWx0ZXIpO1xuICAgIHN0dWRlbnRBdHRlbmRhbmNlRmlsdGVyLmZvckVhY2goKHN0dWRlbnRBdHRlbmRhbmNlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICAgICAgICBjb25zdCB0ZFRvZGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCB0ZFByYXllclRpbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkQWJzZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuXG4gICAgICAgIHRkVG9kYXkuaW5uZXJIVE1MID0gc3R1ZGVudEF0dGVuZGFuY2UuZ2V0QXR0ZW5kYW5jZSgpLmdldFRvZGF5KCk7XG4gICAgICAgIHRkUHJheWVyVGltZS5pbm5lckhUTUwgPSBzdHVkZW50QXR0ZW5kYW5jZS5nZXRBdHRlbmRhbmNlKCkuZ2V0UHJheWVyVGltZSgpO1xuICAgICAgICB0ZEFic2VudC5pbm5lckhUTUwgPSBzdHVkZW50QXR0ZW5kYW5jZS5nZXRJc0Fic2VuY2VUb1N0cmluZygpO1xuXG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkVG9kYXkpO1xuICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZFByYXllclRpbWUpO1xuICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZEFic2VudCk7XG4gICAgICAgIHRib2R5TGlzdFdpdGhTdHVkZW50SWQuYXBwZW5kQ2hpbGQodHIpO1xuICAgIH0pO1xufSJdLCJuYW1lcyI6WyJnbG9iYWwiLCJzZWxmIiwid2luZG93IiwiRXJyb3IiLCJnZXRHbG9iYWwiLCJtb2R1bGUiLCJleHBvcnRzIiwiZmV0Y2giLCJiaW5kIiwiSGVhZGVycyIsIlJlcXVlc3QiLCJSZXNwb25zZSIsImNvbnN0cnVjdG9yIiwiaWQiLCJwcmF5ZXJUaW1lIiwiZGF0ZSIsInRoaXMiLCJfaWQiLCJfcHJheWVyVGltZSIsIl9kYXRlIiwiZ2V0SWQiLCJnZXRQcmF5ZXJUaW1lIiwiZ2V0VG9kYXkiLCJuYW1lIiwic3VybmFtZSIsImFic2VudCIsIl9uYW1lIiwiX3N1cm5hbWUiLCJfYWJzZW50IiwiZ2V0TmFtZSIsImdldFN1cm5hbWUiLCJnZXRBYnNlbnQiLCJzdHVkZW50IiwiYXR0ZW5kYW5jZSIsImlzQWJzZW5jZSIsIl9zdHVkZW50IiwiX2F0dGVuZGFuY2UiLCJfaXNBYnNlbmNlIiwiZ2V0QXR0ZW5kYW5jZSIsImdldFN0dWRlbnQiLCJnZXRJc0Fic2VuY2UiLCJnZXRJc0Fic2VuY2VUb1N0cmluZyIsInN0dWRlbnRJZCIsImdldFN0dWRlbnRJZCIsImFwaVVybCIsIl9hdHRlbmRhbmNlcyIsImFzeW5jIiwicmVzcG9uc2UiLCJtZXRob2QiLCJoZWFkZXJzIiwiQWNjZXB0Iiwib2siLCJzdGF0dXMiLCJyZXN1bHQiLCJqc29uIiwiZm9yRWFjaCIsIm9iamVjdCIsInB1c2giLCJBdHRlbmRhbmNlIiwic3R1ZGVudEF0dGVuZGFuY2VEdG8iLCJpc0VtcHR5IiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGF0dXNUZXh0IiwiX3N0dWRlbnRBdHRlbmRhbmNlcyIsIm1hcCIsInN0dWRlbnRBdHRlbmRhbmNlIiwiU3R1ZGVudEF0dGVuZGFuY2UiLCJTdHVkZW50IiwiYXR0ZW5kYW5jZUlkIiwicmVnTmFtZSIsInJlZ1N1cm5hbWUiLCJfc3R1ZGVudHMiLCJnZXRSZXN1bHQiLCJwYXJzZSIsInZhbGlkYXRlU3R1ZGVudCIsImlzVmFsaWQiLCJ0ZXN0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiLCJzdHVkZW50U2VydmljZSIsIlN0dWRlbnRTZXJ2aWNlIiwiYXR0ZW5kYW5jZVNlcnZpY2UiLCJBdHRlbmRhbmNlU2VydmljZSIsInN0dWRlbnRBdHRlbmRhbmNlc2VydmljZSIsIlN0dWRlbnRBdHRlbmRhbmNlU2VydmljZSIsImFkZFN0dWRlbnRCdXR0b24iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidXBkYXRlU3R1ZGVudEJ1dHRvbiIsInRha2VBdHRlbmRhbmNlQnV0dG9uIiwidXBkYXRlQXR0ZW5kYW5jZUJ1dHRvbiIsIm5hbWVJbnB1dCIsInN1cm5hbWVJbnB1dCIsInNlbGVjdFByYXllclRpbWUiLCJzZWxlY3RMaXN0IiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJteVNlbGVjdEF0dGVuZGFuY2VJZCIsIm15U2VsZWN0U3R1ZGVudElkIiwic3R1ZGVudFRhYmxlIiwidGFrZUF0dGVuZGFuY2VUYWJsZSIsImxpc3RBdHRlbmRhbmNlQm9keSIsInRib2R5TGlzdEZvckF0dGVuZGFuY2UiLCJ0Ym9keUxpc3RXaXRoU3R1ZGVudElkIiwic2VsZWN0ZWRTdHVkZW50Iiwic2VsZWN0ZWRBdHRlbmRhbmNlSWQiLCJzaG93TGlzdHMiLCJpbm5lckhUTUwiLCJnZXRTdHVkZW50cyIsInRyIiwiY3JlYXRlRWxlbWVudCIsInRkSWQiLCJ0ZE5hbWUiLCJ0ZFN1cm5hbWUiLCJ0ZEFic2VudCIsInRkRGVsZXRlIiwidGRVcGRhdGUiLCJ0ZEJ1dHRvbiIsImRlbGV0ZUJ1dHRvbiIsInVwZGF0ZUJ1dHRvbiIsInRvU3RyaW5nIiwiaW5uZXJUZXh0Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwiY29uc29sZSIsImxvZyIsImRlbGV0ZVN0dWRlbnQiLCJOdW1iZXIiLCJkYXRhc2V0IiwiYWxlcnQiLCJ2YWx1ZSIsInN0eWxlIiwiZGlzcGxheSIsInNob3dTdHVkZW50TGlzdCIsInRkT3B0aW9uIiwic2VsZWN0Iiwib3B0aW9uMSIsIm9wdGlvbjIiLCJ0YWtlQXR0ZW5kYW5jZUxpc3QiLCJnZXRBdHRlbmRhbmNlcyIsInRkRGF0ZSIsInRkUHJheWVyVGltZSIsImRlbGV0ZUF0dGVuZGFuY2UiLCJsaXN0QXR0ZW5kYW5jZXNGb3JTdHVkZW50cyIsImxpc3RTdHVkZW50c0ZvckF0dGVuZGFuY2UiLCJsaXN0QXR0ZW5kYW5jZSIsImF0dGVuZGFuY2VMaXN0Iiwib3B0aW9uIiwic3R1ZGVudExpc3QiLCJhZGRTdHVkZW50IiwidXBkYXRlU3R1ZGVudCIsIkFycmF5IiwiaW5kZXgiLCJTdHVkZW50QXR0ZW5kYW5jZURUTyIsInRha2VBdHRlbmRhbmNlIiwidGhlbiIsInVwZGF0ZUF0dGVuZGFuY2UiLCJzdHVkZW50QXR0ZW5kYW5jZUZpbHRlciIsImdldFN0dWRlbnRzQnlBdHRlbmRhbmNlSWQiLCJsaXN0U3R1ZGVudHNXaXRoQXR0ZW5kYW5jZUlkIiwiZ2V0QXR0ZW5kYW5jZXNCeVN0dWRlbnRJZCIsInRkVG9kYXkiLCJsaXN0QXR0ZW5kYW5jZVdpdGhTdHVkZW50SWQiXSwic291cmNlUm9vdCI6IiJ9
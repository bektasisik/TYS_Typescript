(()=>{"use strict";var e={300:(e,t)=>{var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();e.exports=t=n.fetch,n.fetch&&(t.default=n.fetch.bind(n)),t.Headers=n.Headers,t.Request=n.Request,t.Response=n.Response},674:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Attendance=void 0,t.Attendance=class{constructor(e,t,n){this._id=e,this._prayerTime=t,this._date=n}getId(){return this._id}getPrayerTime(){return this._prayerTime}getToday(){return this._date}}},406:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Student=void 0,t.Student=class{constructor(e,t,n,a){this._id=e,this._name=t,this._surname=n,this._absent=a}getId(){return this._id}getName(){return this._name}getSurname(){return this._surname}getAbsent(){return this._absent}}},669:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StudentAttendance=void 0,t.StudentAttendance=class{constructor(e,t,n){this._student=e,this._attendance=t,this._isAbsence=n}getAttendance(){return this._attendance}getStudent(){return this._student}getIsAbsence(){return this._isAbsence}getIsAbsenceToString(){return this._isAbsence?"Var":"Yok"}}},458:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StudentAttendanceDTO=void 0,t.StudentAttendanceDTO=class{constructor(e,t){this.studentId=e,this.isAbsence=t}getStudentId(){return this.studentId}getIsAbsence(){return this.isAbsence}}},711:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AttendanceService=void 0;const a=n(674);var d="http://localhost:8080/api/v1/attendances";t.AttendanceService=class{constructor(){this._attendances=[]}async getAttendances(){const e=await fetch(d,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const t=await e.json();return this._attendances=[],t.forEach((e=>{this._attendances.push(new a.Attendance(e.id,e.prayerTime,e.date))})),this._attendances}async getAttendance(e){const t=await fetch(d+"/"+e,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=await t.json();return new a.Attendance(n.id,n.prayerTime,n.date)}async isEmpty(e){return""!==e&&null!=e}async takeAttendance(e,t){if(!this.isEmpty(e))throw new Error("Prayer time cannot be empty!");const n=await fetch(d,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prayerTime:e,studentAttendanceDto:t})});if(!n.ok)throw new Error(n.statusText)}async updateAttendance(e,t,n){const a=await fetch(d+"/"+e,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:e,prayerTime:t,studentAttendanceDto:n})});if(!a.ok)throw new Error(a.statusText)}async deleteAttendance(e){const t=await fetch(d+"/"+e,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:e})});if(!t.ok)throw new Error(t.statusText)}}},590:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StudentAttendanceService=void 0;const a=n(674),d=n(406),s=n(669);var r="http://localhost:8080/api/v1/student-attendances";t.StudentAttendanceService=class{constructor(){this._studentAttendances=[]}async getStudentAttendances(){const e=await fetch(r,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const t=await e.json();return this._studentAttendances=[],this._studentAttendances=t.map((e=>new s.StudentAttendance(new d.Student(e.student.id,e.student.name,e.student.surname,e.student.absent),new a.Attendance(e.attendance.id,e.attendance.prayerTime,e.attendance.date),e.isAbsence))),this._studentAttendances}async getStudentsByAttendanceId(e){const t=await fetch(r+"/?"+new URLSearchParams({attendanceId:e.toString()}),{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);return(await t.json()).map((e=>new s.StudentAttendance(new d.Student(e.student.id,e.student.name,e.student.surname,e.student.absent),new a.Attendance(e.attendance.id,e.attendance.prayerTime,e.attendance.date),e.isAbsence)))}async getAttendancesByStudentId(e){const t=await fetch(r+"/?"+new URLSearchParams({studentId:e.toString()}),{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);return(await t.json()).map((e=>new s.StudentAttendance(new d.Student(e.student.id,e.student.name,e.student.surname,e.student.absent),new a.Attendance(e.attendance.id,e.attendance.prayerTime,e.attendance.date),e.isAbsence)))}}},287:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.StudentService=void 0;const d=n(406),s=a(n(300));var r="http://localhost:8080/api/v1/students",i=/^[a-zA-ZğüşıöçĞÜŞİÖÇ ]{3,20}$/,c=/^[a-zA-ZğüşıöçĞÜŞİÖÇ ]{2,20}$/;t.StudentService=class{constructor(){this._students=[]}async getStudents(){const e=await(0,s.default)(r,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const t=await e.json();return this._students=[],t.forEach((e=>{this._students.push(new d.Student(e.id,e.name,e.surname,e.absent))})),this._students}async getStudent(e){const t=await(0,s.default)(r+"/"+e,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=await t.json(),a=JSON.parse(JSON.stringify(n));return new d.Student(a.getId(),a.getName(),a.getSurname(),a.getAbsent())}async addStudent(e,t){this.validateStudent(e,t);const n=await(0,s.default)(r,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,surname:t})});if(!n.ok)throw new Error(`Error! status: ${n.status}`)}async updateStudent(e,t,n){this.validateStudent(t,n);const a=await(0,s.default)(r+"/"+e.getId(),{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({name:t,surname:n})});if(!a.ok)throw new Error(`Error! status: ${a.status}`)}async validateStudent(e,t){if(!this.isValid(e,t))throw new Error("Name or surname is not valid")}async isValid(e,t){return i.test(e)&&c.test(t)}async deleteStudent(e){const t=await(0,s.default)(r+"/"+e,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`)}}}},t={};function n(a){var d=t[a];if(void 0!==d)return d.exports;var s=t[a]={exports:{}};return e[a].call(s.exports,s,s.exports,n),s.exports}(()=>{const e=n(287),t=n(711),a=n(590),d=n(458),s=new e.StudentService,r=new t.AttendanceService,i=new a.StudentAttendanceService,c=document.getElementById("addStudentButton"),o=document.getElementById("updateStudentButton"),l=document.getElementById("takeAttendanceButton"),u=document.getElementById("updateAttendanceButton"),m=document.getElementById("nameInput"),p=document.getElementById("surnameInput"),h=document.getElementById("selectPrayerTime"),y=document.getElementsByName("selectAbsence"),g=document.getElementById("selectListWithAttendanceId"),E=document.getElementById("mySelectStudentId"),A=document.getElementById("studentListBody"),S=document.getElementById("takeAttendanceBody"),f=document.getElementById("listAttendanceBody"),b=document.getElementById("tbodyListForAttendance"),w=document.getElementById("tbodyListWithStudentId");let v,T;async function k(){A.innerHTML="",(await s.getStudents()).forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),r=document.createElement("td"),i=document.createElement("td"),l=document.createElement("td"),u=document.createElement("td"),h=document.createElement("button"),y=document.createElement("button");n.innerHTML=e.getId().toString(),a.innerText=e.getName(),d.innerText=e.getSurname(),r.innerText=e.getAbsent().toString(),h.setAttribute("class","btn btn-danger"),h.setAttribute("id","deleteButton"),h.setAttribute("data-id",e.getId().toString()),h.innerHTML='<i class="fas fa-trash-alt"></i>',y.setAttribute("class","btn btn-primary"),y.setAttribute("id","updateButton"),y.setAttribute("data-id",e.getId().toString()),y.innerHTML='<i class="fa-solid fa-edit"></i>',i.appendChild(h),l.appendChild(y),t.appendChild(n),t.appendChild(a),t.appendChild(d),t.appendChild(r),u.appendChild(i),u.appendChild(l),u.setAttribute("class","d-flex justify-content-around"),t.appendChild(u),A.appendChild(t),h.addEventListener("click",(async e=>{e.preventDefault(),console.log("Silme"),await s.deleteStudent(Number(h.dataset.id)),k(),I(),j(),B(0),alert("Öğrenci Silindi")})),y.addEventListener("click",(t=>{t.preventDefault(),v=e,m.value=v.getName(),p.value=v.getSurname(),y.style.display="none",h.style.display="none",o.style.display="block",c.style.display="none",o.setAttribute("data-id",v.getId().toString())}))}))}async function I(){S.innerHTML="",(await s.getStudents()).forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),s=document.createElement("td"),r=document.createElement("label"),i=document.createElement("input"),c=document.createElement("span");n.innerHTML=e.getId().toString(),a.innerText=e.getName(),d.innerText=e.getSurname(),r.setAttribute("class","switch"),i.setAttribute("type","checkbox"),i.setAttribute("id","checkbox"),i.checked=!0,i.setAttribute("name","selectAbsence"),i.setAttribute("data-id",e.getId().toString()),c.setAttribute("class","slider round"),r.appendChild(i),r.appendChild(c),s.appendChild(r),t.appendChild(n),t.appendChild(a),t.appendChild(d),t.appendChild(s),S.appendChild(t)}))}async function _(){f.innerHTML="",(await r.getAttendances()).forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),s=document.createElement("td"),i=document.createElement("td"),c=document.createElement("td"),o=document.createElement("button"),m=document.createElement("button");n.innerHTML=e.getId().toString(),a.innerText=e.getToday(),d.innerText=e.getPrayerTime(),o.setAttribute("class","btn btn-danger"),o.setAttribute("id","deleteButton"),o.setAttribute("data-id",e.getId().toString()),o.innerHTML='<i class="fas fa-trash-alt"></i>',m.setAttribute("class","btn btn-primary"),m.setAttribute("id","updateButton"),m.setAttribute("data-id",e.getId().toString()),m.innerHTML='<i class="fa-solid fa-edit"></i>',s.appendChild(o),i.appendChild(m),t.appendChild(n),t.appendChild(a),t.appendChild(d),c.appendChild(s),c.appendChild(i),c.setAttribute("class","d-flex justify-content-around"),t.appendChild(c),f.appendChild(t),o.addEventListener("click",(async e=>{e.preventDefault(),console.log("Silme"),await r.deleteAttendance(Number(o.dataset.id)),k(),I(),_(),C(),j(),L(0),B(0),alert("Yoklama Silindi")})),m.addEventListener("click",(t=>{t.preventDefault(),T=e.getId(),h.value=e.getPrayerTime(),m.style.display="none",o.style.display="none",u.style.display="block",l.style.display="none",u.setAttribute("data-id",T.toString())}))}))}async function C(){g.innerHTML="";const e=document.createElement("option");e.setAttribute("value","0"),e.setAttribute("hidden","true"),e.innerText="Yoklama Seçiniz",g.appendChild(e),(await r.getAttendances()).forEach((e=>{const t=document.createElement("option");t.setAttribute("value",e.getId().toString()),t.innerText=e.getToday(),g.appendChild(t)}))}async function L(e){console.log("Yokalmaya göre Talebe Listeleme"),b.innerHTML="";const t=await i.getStudentsByAttendanceId(e);console.log(t),t.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),s=document.createElement("td");n.innerHTML=e.getStudent().getId().toString(),a.innerHTML=e.getStudent().getName(),d.innerHTML=e.getStudent().getSurname(),s.innerHTML=e.getIsAbsenceToString(),t.appendChild(n),t.appendChild(a),t.appendChild(d),t.appendChild(s),b.appendChild(t)}))}async function j(){E.innerHTML="";const e=await s.getStudents(),t=document.createElement("option");t.setAttribute("value","0"),t.setAttribute("hidden","true"),t.innerText="Öğrenci Seçiniz",E.appendChild(t),e.forEach((e=>{const t=document.createElement("option");t.setAttribute("value",e.getId().toString()),t.innerText=e.getName()+" "+e.getSurname(),E.appendChild(t)}))}async function B(e){console.log("Talebeye göre Yoklama Listeleme"),w.innerHTML="";const t=await i.getAttendancesByStudentId(e);console.log(t),t.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td");n.innerHTML=e.getAttendance().getToday(),a.innerHTML=e.getAttendance().getPrayerTime(),d.innerHTML=e.getIsAbsenceToString(),t.appendChild(n),t.appendChild(a),t.appendChild(d),w.appendChild(t)}))}k(),I(),_(),C(),j(),L(0),B(0),c.addEventListener("click",(async e=>{e.preventDefault(),console.log("Ekleme");try{await s.addStudent(m.value,p.value),k(),I(),j(),B(0),alert(m.value+" "+p.value+"\nÖğrenci Eklendi"),m.value="",p.value=""}catch(e){alert("Talebe ADI ve SOYADI uygun formatta değil\n3-20 karakter arası sadece harf giriniz\nÖrnek: Bektaş Işık")}})),o.addEventListener("click",(async e=>{e.preventDefault(),console.log("Güncelleme");try{await s.updateStudent(v,m.value,p.value),m.value="",p.value="",c.style.display="block",o.style.display="none",k(),I(),j(),B(0),alert("Öğrenci Güncellendi")}catch(e){alert("Talebe ADI ve SOYADI uygun formatta değil\n3-20 karakter arası sadece harf giriniz\nÖrnek: Bektaş Işık")}})),l.addEventListener("click",(async e=>{e.preventDefault(),console.log("Yoklama alma");let t=new Array;(await s.getStudents()).forEach(((e,n)=>{t.push(new d.StudentAttendanceDTO(e.getId(),y[n].checked))}));try{await r.takeAttendance(h.value,t).then((()=>{k(),I(),_(),C(),j(),L(0),B(0),alert(h.value+" Yoklaması Alındı")}))}catch(e){alert("Lütfen Vakti Seçiniz")}})),u.addEventListener("click",(async e=>{e.preventDefault(),console.log("Yoklama güncelleme");let t=new Array;(await s.getStudents()).forEach(((e,n)=>{t.push(new d.StudentAttendanceDTO(e.getId(),y[n].checked))})),await r.updateAttendance(T,h.value,t),k(),I(),_(),C(),j(),L(0),B(0),l.style.display="block",u.style.display="none",alert(h.value+"Yoklaması Güncellendi")})),g.addEventListener("click",(e=>{e.preventDefault(),"0"!==g.value?(console.log("Yoklama Seçildi"),L(Number(g.value)),alert("Seçilen Yoklamanın Öğrencileri Listelendi")):alert("Lütfen Yoklama Mevcut ise Seçiniz \nYoklama Yoksa Yoklama Alınız")})),E.addEventListener("click",(e=>{e.preventDefault(),"0"!==E.value?(console.log("Talebe Seçildi"),B(Number(E.value)),alert("Seçilen Öğrencinin Yoklamaları Listelendi")):alert("Lütfen Yoklama Mevcut ise Seçiniz \nYoklama Yoksa Yoklama Alınız")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
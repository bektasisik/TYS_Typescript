(()=>{"use strict";var e={300:(e,t)=>{var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();e.exports=t=n.fetch,n.fetch&&(t.default=n.fetch.bind(n)),t.Headers=n.Headers,t.Request=n.Request,t.Response=n.Response},674:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Attendance=void 0,t.Attendance=class{constructor(e,t,n){this._date=new Date,this._today=this._date.getDate()+"/"+(this._date.getMonth()+1)+"/"+this._date.getFullYear()+" "+this._date.getHours()+":"+this._date.getMinutes()+":"+this._date.getSeconds(),this._id=e,this._prayerTime=t,this._today=n}getId(){return this._id}getPrayerTime(){return this._prayerTime}setPrayerTime(e){this._prayerTime=e}getToday(){return this._today}showInfoAttendance(){console.log(this._id+" "+this._prayerTime+" "+this._today)}}},406:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Student=void 0,t.Student=class{constructor(e,t,n,a){this._id=e,this._name=t,this._surname=n,this._absent=a}getId(){return this._id}getName(){return this._name}getSurname(){return this._surname}getAbsent(){return this._absent}setName(e){this._name=e}setSurname(e){this._surname=e}showInfoStudent(){console.log(this._name+" "+this._surname+" "+this._absent)}}},669:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StudentAttendance=void 0,t.StudentAttendance=class{constructor(e,t,n){this._student=e,this._attendance=t,this._isAbsence=n}getAttendance(){return this._attendance}getStudent(){return this._student}getIsAbsence(){return this._isAbsence}getIsAbsenceToString(){return this._isAbsence?"Var":"Yok"}showInfoStudentAttendance(){console.log(this.getStudent()+" "+this.getAttendance()+" "+this.getIsAbsenceToString())}}},225:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StudentAttendanceDTO=void 0,t.StudentAttendanceDTO=class{constructor(e,t){this.studentId=e,this.isAbsence=t}getStudentId(){return this.studentId}getIsAbsence(){return this.isAbsence}showInfoStudentAttendanceDTO(){console.log(this.studentId+" "+this.isAbsence)}}},711:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AttendanceService=void 0;const a=n(674),d=n(406),s=n(669);var i="http://localhost:8080/api/v1/attendances";t.AttendanceService=class{constructor(){this._attendances=[],this._studentAttendances=[]}async getAttendances(){const e=await fetch(i,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const t=await e.json();return this._attendances=[],t.forEach((e=>{this._attendances.push(new a.Attendance(e.id,e.prayerTime,e.date))})),this._attendances}async getAttendance(e){const t=await fetch(i+"/"+e,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=await t.json();return new a.Attendance(n.id,n.prayerTime,n.date)}async getStudentAttendances(){const e=await fetch(i+"/studentAttendances",{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const t=await e.json();return this._studentAttendances=[],this._studentAttendances=t.map((e=>new s.StudentAttendance(new d.Student(e.student.id,e.student.name,e.student.surname,e.student.absent),new a.Attendance(e.attendance.id,e.attendance.prayerTime,e.attendance.date),e.isAbsence))),this._studentAttendances}async getAttendancesByAttendanceId(e){const t=await fetch(i+"/attendance/"+e,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=await t.json(),r=[];return n.forEach((e=>{r.push(new s.StudentAttendance(new d.Student(e.student.id,e.student.name,e.student.surname,e.student.absent),new a.Attendance(e.attendance.id,e.attendance.prayerTime,e.attendance.date),e.isAbsence))})),r}async getAttendancesByStudentId(e){const t=await fetch(i+"/student/"+e,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=await t.json(),r=[];return n.forEach((e=>{r.push(new s.StudentAttendance(new d.Student(e.student.id,e.student.name,e.student.surname,e.student.absent),new a.Attendance(e.attendance.id,e.attendance.prayerTime,e.attendance.date),e.isAbsence))})),r}async isEmpty(e){return""!==e&&null!=e}async takeAttendance(e,t){if(!this.isEmpty(e))throw new Error("Prayer time cannot be empty!");const n=await fetch(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prayerTime:e,studentAttendanceDto:t})});if(!n.ok)throw new Error(n.statusText)}async updateAttendance(e,t,n){const a=await fetch(i+"/"+e,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:e,prayerTime:t,studentAttendanceDto:n})});if(!a.ok)throw new Error(a.statusText)}async deleteAttendance(e){const t=await fetch(i+"/"+e,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:e})});if(!t.ok)throw new Error(t.statusText)}}},287:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.StudentService=void 0;const d=n(406),s=a(n(300));var i="http://localhost:8080/api/v1/students",r=/^[a-zA-ZğüşıöçĞÜŞİÖÇ ]{3,20}$/,o=/^[a-zA-ZğüşıöçĞÜŞİÖÇ ]{2,20}$/;t.StudentService=class{constructor(){this._students=[]}async getStudents(){const e=await(0,s.default)(i,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const t=await e.json();return this._students=[],t.forEach((e=>{this._students.push(new d.Student(e.id,e.name,e.surname,e.absent))})),this._students}async getStudent(e){const t=await(0,s.default)(i+"/"+e,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=await t.json();return new d.Student(n.id,n.name,n.surname,n.absent)}async addStudent(e,t){this.validateStudent(e,t);const n=await(0,s.default)(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,surname:t})});if(!n.ok)throw new Error(`Error! status: ${n.status}`)}async updateStudent(e,t,n){this.validateStudent(t,n);const a=await(0,s.default)(i+"/"+e.getId(),{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({name:t,surname:n})});if(!a.ok)throw new Error(`Error! status: ${a.status}`)}async validateStudent(e,t){if(!this.isValid(e,t))throw new Error("Name or surname is not valid")}async isValid(e,t){return r.test(e)&&o.test(t)}async deleteStudent(e){const t=await(0,s.default)(i+"/"+e,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`)}}}},t={};function n(a){var d=t[a];if(void 0!==d)return d.exports;var s=t[a]={exports:{}};return e[a].call(s.exports,s,s.exports,n),s.exports}(()=>{const e=n(287),t=n(711),a=n(225),d=new e.StudentService,s=new t.AttendanceService,i=document.getElementById("addStudentButton"),r=document.getElementById("updateStudentButton"),o=document.getElementById("takeAttendanceButton"),c=document.getElementById("updateAttendanceButton"),l=document.getElementById("nameInput"),u=document.getElementById("surnameInput"),m=document.getElementById("selectPrayerTime"),p=document.getElementsByName("selectAbsence"),h=document.getElementById("selectListWithAttendanceId"),y=document.getElementById("mySelectStudentId"),g=document.getElementById("studentListBody"),E=document.getElementById("takeAttendanceBody"),A=document.getElementById("listAttendanceBody"),f=document.getElementById("tbodyListForAttendance"),S=document.getElementById("tbodyListWithStudentId");let w,b;function T(){!async function(){g.innerHTML="",(await d.getStudents()).forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),s=document.createElement("td"),o=document.createElement("td"),c=document.createElement("td"),m=document.createElement("td"),p=document.createElement("td"),h=document.createElement("button"),y=document.createElement("button");n.innerHTML=e.getId().toString(),a.innerText=e.getName(),s.innerText=e.getSurname(),o.innerText=e.getAbsent().toString(),h.setAttribute("class","btn btn-danger"),h.setAttribute("id","deleteButton"),h.setAttribute("data-id",e.getId().toString()),h.innerHTML='<i class="fas fa-trash-alt"></i>',y.setAttribute("class","btn btn-primary"),y.setAttribute("id","updateButton"),y.setAttribute("data-id",e.getId().toString()),y.innerHTML='<i class="fa-solid fa-edit"></i>',c.appendChild(h),m.appendChild(y),t.appendChild(n),t.appendChild(a),t.appendChild(s),t.appendChild(o),p.appendChild(c),p.appendChild(m),p.setAttribute("class","d-flex justify-content-around"),t.appendChild(p),g.appendChild(t),h.addEventListener("click",(async e=>{e.preventDefault(),console.log("Silme"),await d.deleteStudent(Number(h.dataset.id)),T(),alert("Öğrenci Silindi")})),y.addEventListener("click",(t=>{t.preventDefault(),w=e,l.value=w.getName(),u.value=w.getSurname(),h.style.display="none",i.style.display="none",r.style.display="block",r.setAttribute("data-id",w.getId().toString())}))}))}(),async function(){E.innerHTML="",(await d.getStudents()).forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),s=document.createElement("td"),i=document.createElement("select"),r=document.createElement("option"),o=document.createElement("option");n.innerHTML=e.getId().toString(),a.innerText=e.getName(),d.innerText=e.getSurname(),i.setAttribute("class","form-select"),i.setAttribute("name","selectAbsence"),i.setAttribute("aria-label","select example"),r.setAttribute("value","+"),o.setAttribute("value","-"),r.innerText="+",o.innerText="-",i.appendChild(r),i.appendChild(o),s.appendChild(i),t.appendChild(n),t.appendChild(a),t.appendChild(d),t.appendChild(s),E.appendChild(t)}))}(),async function(){A.innerHTML="",(await s.getAttendances()).forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),i=document.createElement("td"),r=document.createElement("td"),l=document.createElement("td"),u=document.createElement("button"),p=document.createElement("button");n.innerHTML=e.getId().toString(),a.innerText=e.getToday(),d.innerText=e.getPrayerTime(),u.setAttribute("class","btn btn-danger"),u.setAttribute("id","deleteButton"),u.setAttribute("data-id",e.getId().toString()),u.innerHTML='<i class="fas fa-trash-alt"></i>',p.setAttribute("class","btn btn-primary"),p.setAttribute("id","updateButton"),p.setAttribute("data-id",e.getId().toString()),p.innerHTML='<i class="fa-solid fa-edit"></i>',i.appendChild(u),r.appendChild(p),t.appendChild(n),t.appendChild(a),t.appendChild(d),l.appendChild(i),l.appendChild(r),l.setAttribute("class","d-flex justify-content-around"),t.appendChild(l),A.appendChild(t),u.addEventListener("click",(async e=>{e.preventDefault(),console.log("Silme"),await s.deleteAttendance(Number(u.dataset.id)),T(),v(),_(),alert("Yoklama Silindi")})),p.addEventListener("click",(t=>{t.preventDefault(),b=e.getId(),m.value=e.getPrayerTime(),u.style.display="none",c.style.display="block",o.style.display="none",c.setAttribute("data-id",b.toString())}))}))}()}async function v(){h.innerHTML="";const e=await s.getAttendances();(await e).forEach((e=>{const t=document.createElement("option");t.setAttribute("value",e.getId().toString()),t.innerText=e.getToday()+" "+e.getPrayerTime(),h.appendChild(t)}))}async function _(){const e=await d.getStudents();y.innerHTML="",e.forEach((e=>{const t=document.createElement("option");t.setAttribute("value",e.getId().toString()),t.innerText=e.getName()+" "+e.getSurname(),y.appendChild(t)}))}T(),v(),_(),i.addEventListener("click",(async e=>{e.preventDefault(),console.log("Ekleme");try{await d.addStudent(l.value,u.value),T(),alert(l.value+" "+u.value+"\nÖğrenci Eklendi"),l.value="",u.value=""}catch(e){alert("Talebe ADI ve SOYADI uygun formatta değil\n3-20 karakter arası sadece harf giriniz\nÖrnek: Bektaş Işık")}})),r.addEventListener("click",(async e=>{e.preventDefault(),console.log("Güncelleme");try{await d.updateStudent(w,l.value,u.value),l.value="",u.value="",i.style.display="block",r.style.display="none",T(),alert("Öğrenci Güncellendi")}catch(e){alert("Talebe ADI ve SOYADI uygun formatta değil\n3-20 karakter arası sadece harf giriniz\nÖrnek: Bektaş Işık")}})),o.addEventListener("click",(async e=>{e.preventDefault(),console.log("Yoklama alma");let t=new Array;(await d.getStudents()).forEach(((e,n)=>{t.push(new a.StudentAttendanceDTO(e.getId(),"+"===p[n].value))}));try{await s.takeAttendance(m.value,t).then((()=>{T(),v(),_(),alert(m.value+" Yoklaması Alındı")}))}catch(e){alert("Lütfen Vakti Seçiniz")}})),c.addEventListener("click",(async e=>{e.preventDefault(),console.log("Yoklama güncelleme");let t=new Array;(await d.getStudents()).forEach(((e,n)=>{t.push(new a.StudentAttendanceDTO(e.getId(),"+"===p[n].value))})),await s.updateAttendance(b,m.value,t),T(),v(),_(),o.style.display="block",c.style.display="none",alert(m.value+"Yoklaması Güncellendi")})),h.addEventListener("click",(e=>{e.preventDefault(),""!==h.value?(console.log("Yoklama Seçildi"),async function(e){console.log("Yokalmaya göre Talebe Listeleme"),f.innerHTML="";const t=await s.getAttendancesByAttendanceId(e);console.log(t),t.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),s=document.createElement("td");n.innerHTML=e.getStudent().getId().toString(),a.innerHTML=e.getStudent().getName(),d.innerHTML=e.getStudent().getSurname(),s.innerHTML=e.getIsAbsenceToString(),t.appendChild(n),t.appendChild(a),t.appendChild(d),t.appendChild(s),f.appendChild(t)}))}(Number(h.value)),v(),alert("Seçilen Yoklamanın Öğrencileri Listelendi")):alert("Yoklama Listeniz Boş. Lütfen Yoklama Alınız...")})),y.addEventListener("click",(e=>{e.preventDefault(),""!==y.value?(console.log("Talebe Seçildi"),async function(e){console.log("Talebeye göre Yoklama Listeleme"),S.innerHTML="";const t=await s.getAttendancesByStudentId(e);console.log(t),t.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td");n.innerHTML=e.getAttendance().getToday(),a.innerHTML=e.getAttendance().getPrayerTime(),d.innerHTML=e.getIsAbsenceToString(),t.appendChild(n),t.appendChild(a),t.appendChild(d),S.appendChild(t)}))}(Number(y.value)),_(),alert("Seçilen Öğrencinin Yoklamaları Listelendi")):alert("Yoklama Listeniz Boş. Lütfen Yoklama Alınız...")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QWtCdEIsdUJBRXZDd0UsRUFBR2MsWUFBWXdDLEdBQ2Z0RCxFQUFHYyxZQUFZbUIsR0FDZmpDLEVBQUdjLFlBQVlULEdBQ2ZYLEVBQXVCb0IsWUFBWWQsRUFBRyxHQUU5QyxDQTNPUXVELENBQTRCcEMsT0FBTzlCLEVBQWtCaUMsUUFDckRjLElBQ0FmLE1BQU0sOENBR05BLE1BQU0saUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90eXMvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC9icm93c2VyLmpzIiwid2VicGFjazovL3R5cy8uL3NyYy9kb21haW4vYXR0ZW5kYW5jZS50cyIsIndlYnBhY2s6Ly90eXMvLi9zcmMvZG9tYWluL3N0dWRlbnQudHMiLCJ3ZWJwYWNrOi8vdHlzLy4vc3JjL2RvbWFpbi9zdHVkZW50X2F0dGVuZGFuY2UudHMiLCJ3ZWJwYWNrOi8vdHlzLy4vc3JjL2RvbWFpbi9zdHVkZW50X2F0dGVuZGFuY2VfZHRvLnRzIiwid2VicGFjazovL3R5cy8uL3NyYy9zZXJ2aWNlL2F0dGVuZGFuY2Vfc2VydmljZS50cyIsIndlYnBhY2s6Ly90eXMvLi9zcmMvc2VydmljZS9zdHVkZW50X3NlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vdHlzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3R5cy8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbiAoKSB7XG5cdC8vIHRoZSBvbmx5IHJlbGlhYmxlIG1lYW5zIHRvIGdldCB0aGUgZ2xvYmFsIG9iamVjdCBpc1xuXHQvLyBgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKWBcblx0Ly8gSG93ZXZlciwgdGhpcyBjYXVzZXMgQ1NQIHZpb2xhdGlvbnMgaW4gQ2hyb21lIGFwcHMuXG5cdGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIHNlbGY7IH1cblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiB3aW5kb3c7IH1cblx0aWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBnbG9iYWw7IH1cblx0dGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QnKTtcbn1cblxudmFyIGdsb2JhbCA9IGdldEdsb2JhbCgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBnbG9iYWwuZmV0Y2g7XG5cbi8vIE5lZWRlZCBmb3IgVHlwZVNjcmlwdCBhbmQgV2VicGFjay5cbmlmIChnbG9iYWwuZmV0Y2gpIHtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gZ2xvYmFsLmZldGNoLmJpbmQoZ2xvYmFsKTtcbn1cblxuZXhwb3J0cy5IZWFkZXJzID0gZ2xvYmFsLkhlYWRlcnM7XG5leHBvcnRzLlJlcXVlc3QgPSBnbG9iYWwuUmVxdWVzdDtcbmV4cG9ydHMuUmVzcG9uc2UgPSBnbG9iYWwuUmVzcG9uc2U7IiwiZXhwb3J0IGNsYXNzIEF0dGVuZGFuY2Uge1xuICAgIHByaXZhdGUgX2lkOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfcHJheWVyVGltZTogc3RyaW5nO1xuICAgIHByaXZhdGUgX2RhdGU6IERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIHByaXZhdGUgX3RvZGF5ID0gdGhpcy5fZGF0ZS5nZXREYXRlKCkgKyBcIi9cIiArICh0aGlzLl9kYXRlLmdldE1vbnRoKCkgKyAxKSArIFwiL1wiICsgdGhpcy5fZGF0ZS5nZXRGdWxsWWVhcigpIFxuICAgICsgXCIgXCIgKyB0aGlzLl9kYXRlLmdldEhvdXJzKCkgKyBcIjpcIiArIHRoaXMuX2RhdGUuZ2V0TWludXRlcygpICsgXCI6XCIgKyB0aGlzLl9kYXRlLmdldFNlY29uZHMoKTtcblxuICAgIFxuICAgIGNvbnN0cnVjdG9yKGlkOiBudW1iZXIsIHByYXllclRpbWU6IHN0cmluZywgZGF0ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2lkID0gaWQ7XG4gICAgICAgIHRoaXMuX3ByYXllclRpbWUgPSBwcmF5ZXJUaW1lO1xuICAgICAgICB0aGlzLl90b2RheSA9IGRhdGU7XG4gICAgfVxuICAgIHB1YmxpYyBnZXRJZCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfVxuICAgIHB1YmxpYyBnZXRQcmF5ZXJUaW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcmF5ZXJUaW1lO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0UHJheWVyVGltZShwcmF5ZXJUaW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fcHJheWVyVGltZSA9IHByYXllclRpbWU7XG4gICAgfVxuICAgIHB1YmxpYyBnZXRUb2RheSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fdG9kYXk7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3dJbmZvQXR0ZW5kYW5jZSgpIHtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5faWQgKyBcIiBcIiArIHRoaXMuX3ByYXllclRpbWUgKyBcIiBcIiArIHRoaXMuX3RvZGF5KTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFN0dWRlbnQge1xuIFxuICAgIHByaXZhdGUgX2lkOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgX3N1cm5hbWU6IHN0cmluZztcbiAgICBwcml2YXRlIF9hYnNlbnQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGlkOiBudW1iZXIsIG5hbWU6IHN0cmluZywgc3VybmFtZTogc3RyaW5nLCBhYnNlbnQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9pZCA9IGlkO1xuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5fc3VybmFtZSA9IHN1cm5hbWU7XG4gICAgICAgIHRoaXMuX2Fic2VudCA9IGFic2VudDtcbiAgICB9XG4gXG4gICAgcHVibGljIGdldElkKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U3VybmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3VybmFtZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QWJzZW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hYnNlbnQ7XG4gICAgfVxuXG4gICAgcHVibGljIHNldE5hbWUobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSBuYW1lO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0U3VybmFtZShzdXJuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fc3VybmFtZSA9IHN1cm5hbWU7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3dJbmZvU3R1ZGVudCgpIHtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5fbmFtZSArIFwiIFwiICsgdGhpcy5fc3VybmFtZSArIFwiIFwiICsgdGhpcy5fYWJzZW50KTtcbiAgICB9XG59IiwiaW1wb3J0IHsgU3R1ZGVudCB9IGZyb20gXCIuL3N0dWRlbnRcIjtcbmltcG9ydCB7IEF0dGVuZGFuY2UgfSBmcm9tIFwiLi9hdHRlbmRhbmNlXCI7XG5cbmV4cG9ydCBjbGFzcyBTdHVkZW50QXR0ZW5kYW5jZSB7XG4gICAgcHJpdmF0ZSBfc3R1ZGVudDogU3R1ZGVudDtcbiAgICBwcml2YXRlIF9hdHRlbmRhbmNlOiBBdHRlbmRhbmNlO1xuICAgIHByaXZhdGUgX2lzQWJzZW5jZTogQm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHN0dWRlbnQ6IFN0dWRlbnQsIGF0dGVuZGFuY2U6IEF0dGVuZGFuY2UsIGlzQWJzZW5jZTogQm9vbGVhbikge1xuICAgICAgICB0aGlzLl9zdHVkZW50ID0gc3R1ZGVudDtcbiAgICAgICAgdGhpcy5fYXR0ZW5kYW5jZSA9IGF0dGVuZGFuY2U7XG4gICAgICAgIHRoaXMuX2lzQWJzZW5jZSA9IGlzQWJzZW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QXR0ZW5kYW5jZSgpOkF0dGVuZGFuY2V7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdHRlbmRhbmNlO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0U3R1ZGVudCgpOlN0dWRlbnR7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdHVkZW50O1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0SXNBYnNlbmNlKCk6Qm9vbGVhbntcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWJzZW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0SXNBYnNlbmNlVG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQWJzZW5jZSA/IFwiVmFyXCIgOiBcIllva1wiO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaG93SW5mb1N0dWRlbnRBdHRlbmRhbmNlKCkge1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmdldFN0dWRlbnQoKSArIFwiIFwiICsgdGhpcy5nZXRBdHRlbmRhbmNlKCkgKyBcIiBcIiArIHRoaXMuZ2V0SXNBYnNlbmNlVG9TdHJpbmcoKSk7XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBTdHVkZW50QXR0ZW5kYW5jZURUTyB7XG4gICAgc3R1ZGVudElkOiBudW1iZXI7XG4gICAgaXNBYnNlbmNlOmJvb2xlYW47XG5cbiAgICBnZXRTdHVkZW50SWQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3R1ZGVudElkO1xuICAgIH1cbiAgICBnZXRJc0Fic2VuY2UoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQWJzZW5jZTtcbiAgICB9XG4gICAgXG4gICAgY29uc3RydWN0b3Ioc3R1ZGVudElkOiBudW1iZXIsIGlzQWJzZW5jZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnN0dWRlbnRJZCA9IHN0dWRlbnRJZDtcbiAgICAgICAgdGhpcy5pc0Fic2VuY2UgPSBpc0Fic2VuY2U7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3dJbmZvU3R1ZGVudEF0dGVuZGFuY2VEVE8oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc3R1ZGVudElkICsgXCIgXCIgKyB0aGlzLmlzQWJzZW5jZSk7XG4gICAgfVxuXG59IiwiaW1wb3J0IHsgQXR0ZW5kYW5jZSB9IGZyb20gXCIuLi9kb21haW4vYXR0ZW5kYW5jZVwiO1xuaW1wb3J0IHsgU3R1ZGVudCB9IGZyb20gXCIuLi9kb21haW4vc3R1ZGVudFwiO1xuaW1wb3J0IHsgU3R1ZGVudEF0dGVuZGFuY2UgfSBmcm9tIFwiLi4vZG9tYWluL3N0dWRlbnRfYXR0ZW5kYW5jZVwiO1xuaW1wb3J0IHsgU3R1ZGVudEF0dGVuZGFuY2VEVE8gfSBmcm9tIFwiLi4vZG9tYWluL3N0dWRlbnRfYXR0ZW5kYW5jZV9kdG9cIjtcbmltcG9ydCB7IFN0dWRlbnRTZXJ2aWNlIH0gZnJvbSBcIi4vc3R1ZGVudF9zZXJ2aWNlXCI7XG5cbnZhciBhcGlVcmw6IHN0cmluZyA9ICdodHRwOi8vbG9jYWxob3N0OjgwODAvYXBpL3YxL2F0dGVuZGFuY2VzJztcblxuZXhwb3J0IGNsYXNzIEF0dGVuZGFuY2VTZXJ2aWNlIHtcbiAgICBwcml2YXRlIF9hdHRlbmRhbmNlczogQXJyYXk8QXR0ZW5kYW5jZT4gPSBbXTtcbiAgICBwcml2YXRlIF9zdHVkZW50QXR0ZW5kYW5jZXM6IEFycmF5PFN0dWRlbnRBdHRlbmRhbmNlPiA9IFtdO1xuXG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QXR0ZW5kYW5jZXMoKTogUHJvbWlzZTxBdHRlbmRhbmNlW10+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlVcmwsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSAoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcbiAgICAgICAgdGhpcy5fYXR0ZW5kYW5jZXMgPSBbXTtcbiAgICAgICAgcmVzdWx0LmZvckVhY2goKG9iamVjdDogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9hdHRlbmRhbmNlcy5wdXNoKG5ldyBBdHRlbmRhbmNlKG9iamVjdC5pZCwgb2JqZWN0LnByYXllclRpbWUsIG9iamVjdC5kYXRlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5fYXR0ZW5kYW5jZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldEF0dGVuZGFuY2UoaWQ6IG51bWJlcik6IFByb21pc2U8QXR0ZW5kYW5jZT4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCArICcvJyArIGlkLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XG4gICAgICAgIHJldHVybiBuZXcgQXR0ZW5kYW5jZShyZXN1bHQuaWQsIHJlc3VsdC5wcmF5ZXJUaW1lLCByZXN1bHQuZGF0ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFN0dWRlbnRBdHRlbmRhbmNlcygpOiBQcm9taXNlPFN0dWRlbnRBdHRlbmRhbmNlW10+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlVcmwgKyAnL3N0dWRlbnRBdHRlbmRhbmNlcycsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSAoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcbiAgICAgICAgdGhpcy5fc3R1ZGVudEF0dGVuZGFuY2VzID0gW107XG4gICAgICAgIHRoaXMuX3N0dWRlbnRBdHRlbmRhbmNlcyA9IHJlc3VsdC5tYXAoKHN0dWRlbnRBdHRlbmRhbmNlOiBhbnkpID0+IG5ldyBTdHVkZW50QXR0ZW5kYW5jZShcbiAgICAgICAgICAgIG5ldyBTdHVkZW50KHN0dWRlbnRBdHRlbmRhbmNlLnN0dWRlbnQuaWQsIHN0dWRlbnRBdHRlbmRhbmNlLnN0dWRlbnQubmFtZSwgc3R1ZGVudEF0dGVuZGFuY2Uuc3R1ZGVudC5zdXJuYW1lLCBzdHVkZW50QXR0ZW5kYW5jZS5zdHVkZW50LmFic2VudCksXG4gICAgICAgICAgICBuZXcgQXR0ZW5kYW5jZShzdHVkZW50QXR0ZW5kYW5jZS5hdHRlbmRhbmNlLmlkLCBzdHVkZW50QXR0ZW5kYW5jZS5hdHRlbmRhbmNlLnByYXllclRpbWUsIHN0dWRlbnRBdHRlbmRhbmNlLmF0dGVuZGFuY2UuZGF0ZSksXG4gICAgICAgICAgICBzdHVkZW50QXR0ZW5kYW5jZS5pc0Fic2VuY2UpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0dWRlbnRBdHRlbmRhbmNlcztcbiAgICB9XG5cblxuXG4gICAgcHVibGljIGFzeW5jIGdldEF0dGVuZGFuY2VzQnlBdHRlbmRhbmNlSWQoaWQ6IG51bWJlcik6IFByb21pc2U8U3R1ZGVudEF0dGVuZGFuY2VbXT4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCArICcvYXR0ZW5kYW5jZS8nICsgaWQsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdDogU3R1ZGVudEF0dGVuZGFuY2VbXSA9IChhd2FpdCByZXNwb25zZS5qc29uKCkpO1xuICAgICAgICBjb25zdCBzdHVkZW50QXR0ZW5kYW5jZXM6IFN0dWRlbnRBdHRlbmRhbmNlW10gPSBbXTtcbiAgICAgICAgcmVzdWx0LmZvckVhY2goKG9iamVjdDogYW55KSA9PiB7XG4gICAgICAgICAgICBzdHVkZW50QXR0ZW5kYW5jZXMucHVzaChuZXcgU3R1ZGVudEF0dGVuZGFuY2UoXG4gICAgICAgICAgICAgICAgbmV3IFN0dWRlbnQob2JqZWN0LnN0dWRlbnQuaWQsIG9iamVjdC5zdHVkZW50Lm5hbWUsIG9iamVjdC5zdHVkZW50LnN1cm5hbWUsIG9iamVjdC5zdHVkZW50LmFic2VudCksXG4gICAgICAgICAgICAgICAgbmV3IEF0dGVuZGFuY2Uob2JqZWN0LmF0dGVuZGFuY2UuaWQsIG9iamVjdC5hdHRlbmRhbmNlLnByYXllclRpbWUsIG9iamVjdC5hdHRlbmRhbmNlLmRhdGUpLFxuICAgICAgICAgICAgICAgIG9iamVjdC5pc0Fic2VuY2UpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdHVkZW50QXR0ZW5kYW5jZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldEF0dGVuZGFuY2VzQnlTdHVkZW50SWQoc3R1ZGVudElkOiBudW1iZXIpOiBQcm9taXNlPFN0dWRlbnRBdHRlbmRhbmNlW10+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlVcmwgKyAnL3N0dWRlbnQvJyArIHN0dWRlbnRJZCwge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdDogU3R1ZGVudEF0dGVuZGFuY2VbXSA9IChhd2FpdCByZXNwb25zZS5qc29uKCkpO1xuICAgICAgICBjb25zdCBzdHVkZW50QXR0ZW5kYW5jZXM6IFN0dWRlbnRBdHRlbmRhbmNlW10gPSBbXTtcbiAgICAgICAgcmVzdWx0LmZvckVhY2goKG9iamVjdDogYW55KSA9PiB7XG4gICAgICAgICAgICBzdHVkZW50QXR0ZW5kYW5jZXMucHVzaChuZXcgU3R1ZGVudEF0dGVuZGFuY2UoXG4gICAgICAgICAgICAgICAgbmV3IFN0dWRlbnQob2JqZWN0LnN0dWRlbnQuaWQsIG9iamVjdC5zdHVkZW50Lm5hbWUsIG9iamVjdC5zdHVkZW50LnN1cm5hbWUsIG9iamVjdC5zdHVkZW50LmFic2VudCksXG4gICAgICAgICAgICAgICAgbmV3IEF0dGVuZGFuY2Uob2JqZWN0LmF0dGVuZGFuY2UuaWQsIG9iamVjdC5hdHRlbmRhbmNlLnByYXllclRpbWUsIG9iamVjdC5hdHRlbmRhbmNlLmRhdGUpLFxuICAgICAgICAgICAgICAgIG9iamVjdC5pc0Fic2VuY2UpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdHVkZW50QXR0ZW5kYW5jZXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGlzRW1wdHkocHJheWVyVGltZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiBwcmF5ZXJUaW1lICE9PSAnJyAmJiBwcmF5ZXJUaW1lICE9PSB1bmRlZmluZWQgJiYgcHJheWVyVGltZSAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdGFrZUF0dGVuZGFuY2UocHJheWVyVGltZTogc3RyaW5nLCBzdHVkZW50QXR0ZW5kYW5jZUR0bzogQXJyYXk8U3R1ZGVudEF0dGVuZGFuY2VEVE8+KSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VtcHR5KHByYXllclRpbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ByYXllciB0aW1lIGNhbm5vdCBiZSBlbXB0eSEnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCwge1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBwcmF5ZXJUaW1lOiBwcmF5ZXJUaW1lLFxuICAgICAgICAgICAgICAgIHN0dWRlbnRBdHRlbmRhbmNlRHRvOiBzdHVkZW50QXR0ZW5kYW5jZUR0b1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVBdHRlbmRhbmNlKGlkOiBudW1iZXIsIHByYXllclRpbWU6IHN0cmluZywgc3R1ZGVudEF0dGVuZGFuY2VEdG86IEFycmF5PFN0dWRlbnRBdHRlbmRhbmNlRFRPPikge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCArICcvJyArIGlkLCB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIHByYXllclRpbWU6IHByYXllclRpbWUsXG4gICAgICAgICAgICAgICAgc3R1ZGVudEF0dGVuZGFuY2VEdG86IHN0dWRlbnRBdHRlbmRhbmNlRHRvXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZGVsZXRlQXR0ZW5kYW5jZShpZDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXBpVXJsICsgJy8nICsgaWQsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBpZDogaWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgU3R1ZGVudCB9IGZyb20gXCIuLi9kb21haW4vc3R1ZGVudFwiO1xuaW1wb3J0IGZldGNoIGZyb20gJ25vZGUtZmV0Y2gnO1xuXG52YXIgYXBpVXJsOiBzdHJpbmcgPSAnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaS92MS9zdHVkZW50cyc7XG52YXIgcmVnTmFtZSA9IC9eW2EtekEtWsSfw7zFn8Sxw7bDp8Sew5zFnsSww5bDhyBdezMsMjB9JC87XG52YXIgcmVnU3VybmFtZSA9IC9eW2EtekEtWsSfw7zFn8Sxw7bDp8Sew5zFnsSww5bDhyBdezIsMjB9JC87XG5cbmV4cG9ydCBjbGFzcyBTdHVkZW50U2VydmljZSB7XG4gICAgcHJpdmF0ZSBfc3R1ZGVudHM6IFN0dWRlbnRbXSA9IFtdO1xuXG4gICAgcHVibGljIGFzeW5jIGdldFN0dWRlbnRzKCk6IFByb21pc2U8U3R1ZGVudFtdPiB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXBpVXJsICwge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IChhd2FpdCByZXNwb25zZS5qc29uKCkpO1xuICAgICAgICB0aGlzLl9zdHVkZW50cyA9IFtdO1xuICAgICAgICByZXN1bHQuZm9yRWFjaCgoc3R1ZGVudDogYW55KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zdHVkZW50cy5wdXNoKG5ldyBTdHVkZW50KHN0dWRlbnQuaWQsIHN0dWRlbnQubmFtZSwgc3R1ZGVudC5zdXJuYW1lLCBzdHVkZW50LmFic2VudCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0dWRlbnRzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRTdHVkZW50KGlkOiBudW1iZXIpOiBQcm9taXNlPFN0dWRlbnQ+IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlVcmwgKyAnLycgKyBpZCwge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICByZXR1cm4gbmV3IFN0dWRlbnQocmVzdWx0LmlkLCByZXN1bHQubmFtZSwgcmVzdWx0LnN1cm5hbWUsIHJlc3VsdC5hYnNlbnQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBhZGRTdHVkZW50KG5hbWU6IHN0cmluZywgc3VybmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVTdHVkZW50KG5hbWUsIHN1cm5hbWUpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCAsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgc3VybmFtZTogc3VybmFtZVxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVTdHVkZW50KHN0dWRlbnQ6IFN0dWRlbnQsIG5hbWU6IHN0cmluZywgc3VybmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVTdHVkZW50KG5hbWUsIHN1cm5hbWUpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCArICcvJyArIHN0dWRlbnQuZ2V0SWQoKSwge1xuICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgIHN1cm5hbWU6IHN1cm5hbWVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHZhbGlkYXRlU3R1ZGVudChuYW1lOiBzdHJpbmcsIHN1cm5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQobmFtZSwgc3VybmFtZSkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOYW1lIG9yIHN1cm5hbWUgaXMgbm90IHZhbGlkXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGlzVmFsaWQobmFtZTogc3RyaW5nLCBzdXJuYW1lOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHJlZ05hbWUudGVzdChuYW1lKSAmJiByZWdTdXJuYW1lLnRlc3Qoc3VybmFtZSk7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgYXN5bmMgZGVsZXRlU3R1ZGVudChzdHVkZW50SWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwaVVybCArICcvJyArIHN0dWRlbnRJZCwge1xuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsImltcG9ydCB7IFN0dWRlbnQgfSBmcm9tIFwiLi9kb21haW4vc3R1ZGVudFwiO1xuaW1wb3J0IHsgQXR0ZW5kYW5jZSB9IGZyb20gXCIuL2RvbWFpbi9hdHRlbmRhbmNlXCI7XG5cbmltcG9ydCB7IFN0dWRlbnRTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZS9zdHVkZW50X3NlcnZpY2VcIjtcbmltcG9ydCB7IEF0dGVuZGFuY2VTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmljZS9hdHRlbmRhbmNlX3NlcnZpY2VcIjtcblxuaW1wb3J0IHsgU3R1ZGVudEF0dGVuZGFuY2VEVE8gfSBmcm9tIFwiLi9kb21haW4vc3R1ZGVudF9hdHRlbmRhbmNlX2R0b1wiO1xuXG5jb25zdCBzdHVkZW50U2VydmljZSA9IG5ldyBTdHVkZW50U2VydmljZSgpO1xuY29uc3QgYXR0ZW5kYW5jZVNlcnZpY2UgPSBuZXcgQXR0ZW5kYW5jZVNlcnZpY2UoKTtcblxuY29uc3QgYWRkU3R1ZGVudEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkU3R1ZGVudEJ1dHRvblwiKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcbmNvbnN0IHVwZGF0ZVN0dWRlbnRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVwZGF0ZVN0dWRlbnRCdXR0b25cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG5jb25zdCB0YWtlQXR0ZW5kYW5jZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGFrZUF0dGVuZGFuY2VCdXR0b25cIikgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG5jb25zdCB1cGRhdGVBdHRlbmRhbmNlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1cGRhdGVBdHRlbmRhbmNlQnV0dG9uXCIpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuXG5jb25zdCBuYW1lSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hbWVJbnB1dFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuY29uc3Qgc3VybmFtZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdXJuYW1lSW5wdXRcIikgYXMgSFRNTElucHV0RWxlbWVudDtcblxuY29uc3Qgc2VsZWN0UHJheWVyVGltZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2VsZWN0UHJheWVyVGltZVwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuY29uc3Qgc2VsZWN0TGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKFwic2VsZWN0QWJzZW5jZVwiKSBhcyBOb2RlTGlzdE9mPEhUTUxTZWxlY3RFbGVtZW50PjtcbmNvbnN0IG15U2VsZWN0QXR0ZW5kYW5jZUlkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWxlY3RMaXN0V2l0aEF0dGVuZGFuY2VJZFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuY29uc3QgbXlTZWxlY3RTdHVkZW50SWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm15U2VsZWN0U3R1ZGVudElkXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cbmNvbnN0IHN0dWRlbnRUYWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3R1ZGVudExpc3RCb2R5XCIpIGFzIEhUTUxUYWJsZUVsZW1lbnQ7XG5jb25zdCB0YWtlQXR0ZW5kYW5jZVRhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0YWtlQXR0ZW5kYW5jZUJvZHlcIikgYXMgSFRNTFRhYmxlRWxlbWVudDtcbmNvbnN0IGxpc3RBdHRlbmRhbmNlQm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGlzdEF0dGVuZGFuY2VCb2R5XCIpIGFzIEhUTUxUYWJsZUVsZW1lbnQ7XG5jb25zdCB0Ym9keUxpc3RGb3JBdHRlbmRhbmNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0Ym9keUxpc3RGb3JBdHRlbmRhbmNlXCIpIGFzIEhUTUxUYWJsZVNlY3Rpb25FbGVtZW50O1xuY29uc3QgdGJvZHlMaXN0V2l0aFN0dWRlbnRJZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGJvZHlMaXN0V2l0aFN0dWRlbnRJZFwiKSBhcyBIVE1MVGFibGVTZWN0aW9uRWxlbWVudDtcblxuc2hvd0xpc3RzKCk7XG5saXN0QXR0ZW5kYW5jZXNGb3JTdHVkZW50cygpO1xubGlzdFN0dWRlbnRzRm9yQXR0ZW5kYW5jZSgpO1xuXG5sZXQgc2VsZWN0ZWRTdHVkZW50OiBTdHVkZW50O1xubGV0IHNlbGVjdGVkQXR0ZW5kYW5jZUlkOiBudW1iZXI7XG5cblxuYWRkU3R1ZGVudEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc29sZS5sb2coXCJFa2xlbWVcIik7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgc3R1ZGVudFNlcnZpY2UuYWRkU3R1ZGVudChuYW1lSW5wdXQudmFsdWUsIHN1cm5hbWVJbnB1dC52YWx1ZSk7XG4gICAgICAgIHNob3dMaXN0cygpO1xuICAgICAgICBhbGVydChuYW1lSW5wdXQudmFsdWUgKyBcIiBcIiArIHN1cm5hbWVJbnB1dC52YWx1ZSArIFwiXFxuw5bEn3JlbmNpIEVrbGVuZGlcIik7XG4gICAgICAgIG5hbWVJbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgIHN1cm5hbWVJbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgfSBjYXRjaCB7XG4gICAgICAgIGFsZXJ0KFwiVGFsZWJlIEFESSB2ZSBTT1lBREkgdXlndW4gZm9ybWF0dGEgZGXEn2lsXFxuMy0yMCBrYXJha3RlciBhcmFzxLEgc2FkZWNlIGhhcmYgZ2lyaW5pelxcbsOWcm5lazogQmVrdGHFnyBJxZ/EsWtcIik7XG4gICAgfVxufSk7XG5cbnVwZGF0ZVN0dWRlbnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnNvbGUubG9nKFwiR8O8bmNlbGxlbWVcIik7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgc3R1ZGVudFNlcnZpY2UudXBkYXRlU3R1ZGVudChzZWxlY3RlZFN0dWRlbnQsIG5hbWVJbnB1dC52YWx1ZSwgc3VybmFtZUlucHV0LnZhbHVlKTtcbiAgICAgICAgbmFtZUlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgc3VybmFtZUlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgYWRkU3R1ZGVudEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICB1cGRhdGVTdHVkZW50QnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgc2hvd0xpc3RzKCk7XG4gICAgICAgIGFsZXJ0KFwiw5bEn3JlbmNpIEfDvG5jZWxsZW5kaVwiKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgICAgYWxlcnQoXCJUYWxlYmUgQURJIHZlIFNPWUFESSB1eWd1biBmb3JtYXR0YSBkZcSfaWxcXG4zLTIwIGthcmFrdGVyIGFyYXPEsSBzYWRlY2UgaGFyZiBnaXJpbml6XFxuw5ZybmVrOiBCZWt0YcWfIEnFn8Sxa1wiKTtcbiAgICB9XG59KTtcblxudGFrZUF0dGVuZGFuY2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jIChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnNvbGUubG9nKFwiWW9rbGFtYSBhbG1hXCIpO1xuICAgIGxldCBzdHVkZW50QXR0ZW5kYW5jZUR0byA9IG5ldyBBcnJheTxTdHVkZW50QXR0ZW5kYW5jZURUTz4oKTtcbiAgICAoYXdhaXQgc3R1ZGVudFNlcnZpY2UuZ2V0U3R1ZGVudHMoKSkuZm9yRWFjaCgoc3R1ZGVudDogU3R1ZGVudCwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICBzdHVkZW50QXR0ZW5kYW5jZUR0by5wdXNoKG5ldyBTdHVkZW50QXR0ZW5kYW5jZURUTyhzdHVkZW50LmdldElkKCksIHNlbGVjdExpc3RbaW5kZXhdLnZhbHVlID09PSBcIitcIikpO1xuICAgIH0pO1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGF0dGVuZGFuY2VTZXJ2aWNlLnRha2VBdHRlbmRhbmNlKHNlbGVjdFByYXllclRpbWUudmFsdWUsIHN0dWRlbnRBdHRlbmRhbmNlRHRvKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHNob3dMaXN0cygpO1xuICAgICAgICAgICAgbGlzdEF0dGVuZGFuY2VzRm9yU3R1ZGVudHMoKTtcbiAgICAgICAgICAgIGxpc3RTdHVkZW50c0ZvckF0dGVuZGFuY2UoKTtcbiAgICAgICAgICAgIGFsZXJ0KHNlbGVjdFByYXllclRpbWUudmFsdWUgKyBcIiBZb2tsYW1hc8SxIEFsxLFuZMSxXCIpO1xuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIHtcbiAgICAgICAgYWxlcnQoXCJMw7x0ZmVuIFZha3RpIFNlw6dpbml6XCIpO1xuICAgIH1cbn0pO1xuXG51cGRhdGVBdHRlbmRhbmNlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zb2xlLmxvZyhcIllva2xhbWEgZ8O8bmNlbGxlbWVcIik7XG4gICAgbGV0IHN0dWRlbnRBdHRlbmRhbmNlRHRvID0gbmV3IEFycmF5PFN0dWRlbnRBdHRlbmRhbmNlRFRPPigpO1xuICAgIChhd2FpdCBzdHVkZW50U2VydmljZS5nZXRTdHVkZW50cygpKS5mb3JFYWNoKChzdHVkZW50OiBTdHVkZW50LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIHN0dWRlbnRBdHRlbmRhbmNlRHRvLnB1c2gobmV3IFN0dWRlbnRBdHRlbmRhbmNlRFRPKHN0dWRlbnQuZ2V0SWQoKSwgc2VsZWN0TGlzdFtpbmRleF0udmFsdWUgPT09IFwiK1wiKSk7XG4gICAgfSlcbiAgICBhd2FpdCBhdHRlbmRhbmNlU2VydmljZS51cGRhdGVBdHRlbmRhbmNlKHNlbGVjdGVkQXR0ZW5kYW5jZUlkLCBzZWxlY3RQcmF5ZXJUaW1lLnZhbHVlLCBzdHVkZW50QXR0ZW5kYW5jZUR0byk7XG4gICAgc2hvd0xpc3RzKCk7XG4gICAgbGlzdEF0dGVuZGFuY2VzRm9yU3R1ZGVudHMoKTtcbiAgICBsaXN0U3R1ZGVudHNGb3JBdHRlbmRhbmNlKCk7XG4gICAgdGFrZUF0dGVuZGFuY2VCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICB1cGRhdGVBdHRlbmRhbmNlQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBhbGVydChzZWxlY3RQcmF5ZXJUaW1lLnZhbHVlICsgXCJZb2tsYW1hc8SxIEfDvG5jZWxsZW5kaVwiKTtcbn0pO1xuXG5teVNlbGVjdEF0dGVuZGFuY2VJZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKCEobXlTZWxlY3RBdHRlbmRhbmNlSWQudmFsdWUgPT09IFwiXCIpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiWW9rbGFtYSBTZcOnaWxkaVwiKTtcbiAgICAgICAgbGlzdFN0dWRlbnRzV2l0aEF0dGVuZGFuY2VJZChOdW1iZXIobXlTZWxlY3RBdHRlbmRhbmNlSWQudmFsdWUpKTtcbiAgICAgICAgbGlzdEF0dGVuZGFuY2VzRm9yU3R1ZGVudHMoKTtcbiAgICAgICAgYWxlcnQoXCJTZcOnaWxlbiBZb2tsYW1hbsSxbiDDlsSfcmVuY2lsZXJpIExpc3RlbGVuZGlcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhbGVydChcIllva2xhbWEgTGlzdGVuaXogQm/Fny4gTMO8dGZlbiBZb2tsYW1hIEFsxLFuxLF6Li4uXCIpO1xuICAgIH1cbn0pO1xuXG5teVNlbGVjdFN0dWRlbnRJZC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKCEobXlTZWxlY3RTdHVkZW50SWQudmFsdWUgPT09IFwiXCIpKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVGFsZWJlIFNlw6dpbGRpXCIpO1xuICAgICAgICBsaXN0QXR0ZW5kYW5jZVdpdGhTdHVkZW50SWQoTnVtYmVyKG15U2VsZWN0U3R1ZGVudElkLnZhbHVlKSk7XG4gICAgICAgIGxpc3RTdHVkZW50c0ZvckF0dGVuZGFuY2UoKTtcbiAgICAgICAgYWxlcnQoXCJTZcOnaWxlbiDDlsSfcmVuY2luaW4gWW9rbGFtYWxhcsSxIExpc3RlbGVuZGlcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhbGVydChcIllva2xhbWEgTGlzdGVuaXogQm/Fny4gTMO8dGZlbiBZb2tsYW1hIEFsxLFuxLF6Li4uXCIpO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBzaG93TGlzdHMoKSB7XG4gICAgc2hvd1N0dWRlbnRMaXN0KCk7XG4gICAgdGFrZUF0dGVuZGFuY2VMaXN0KCk7XG4gICAgbGlzdEF0dGVuZGFuY2UoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2hvd1N0dWRlbnRMaXN0KCkge1xuICAgIHN0dWRlbnRUYWJsZS5pbm5lckhUTUwgPSBcIlwiO1xuICAgIChhd2FpdCBzdHVkZW50U2VydmljZS5nZXRTdHVkZW50cygpKS5mb3JFYWNoKChzdHVkZW50OiBTdHVkZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICAgICAgICBjb25zdCB0ZElkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCB0ZE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkU3VybmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgdGRBYnNlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkRGVsZXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCB0ZFVwZGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgdGRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIGNvbnN0IHVwZGF0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG5cbiAgICAgICAgdGRJZC5pbm5lckhUTUwgPSBzdHVkZW50LmdldElkKCkudG9TdHJpbmcoKTtcbiAgICAgICAgdGROYW1lLmlubmVyVGV4dCA9IHN0dWRlbnQuZ2V0TmFtZSgpO1xuICAgICAgICB0ZFN1cm5hbWUuaW5uZXJUZXh0ID0gc3R1ZGVudC5nZXRTdXJuYW1lKCk7XG4gICAgICAgIHRkQWJzZW50LmlubmVyVGV4dCA9IHN0dWRlbnQuZ2V0QWJzZW50KCkudG9TdHJpbmcoKTtcbiAgICAgICAgZGVsZXRlQnV0dG9uLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiYnRuIGJ0bi1kYW5nZXJcIik7XG4gICAgICAgIGRlbGV0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImRlbGV0ZUJ1dHRvblwiKTtcbiAgICAgICAgZGVsZXRlQnV0dG9uLnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIiwgc3R1ZGVudC5nZXRJZCgpLnRvU3RyaW5nKCkpO1xuICAgICAgICBkZWxldGVCdXR0b24uaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmFzIGZhLXRyYXNoLWFsdFwiPjwvaT4nO1xuICAgICAgICB1cGRhdGVCdXR0b24uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJidG4gYnRuLXByaW1hcnlcIik7XG4gICAgICAgIHVwZGF0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInVwZGF0ZUJ1dHRvblwiKTtcbiAgICAgICAgdXBkYXRlQnV0dG9uLnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIiwgc3R1ZGVudC5nZXRJZCgpLnRvU3RyaW5nKCkpO1xuICAgICAgICB1cGRhdGVCdXR0b24uaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmEtc29saWQgZmEtZWRpdFwiPjwvaT4nO1xuICAgICAgICB0ZERlbGV0ZS5hcHBlbmRDaGlsZChkZWxldGVCdXR0b24pO1xuICAgICAgICB0ZFVwZGF0ZS5hcHBlbmRDaGlsZCh1cGRhdGVCdXR0b24pO1xuICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZElkKTtcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGROYW1lKTtcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRTdXJuYW1lKTtcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRBYnNlbnQpO1xuICAgICAgICB0ZEJ1dHRvbi5hcHBlbmRDaGlsZCh0ZERlbGV0ZSk7XG4gICAgICAgIHRkQnV0dG9uLmFwcGVuZENoaWxkKHRkVXBkYXRlKTtcbiAgICAgICAgdGRCdXR0b24uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJkLWZsZXgganVzdGlmeS1jb250ZW50LWFyb3VuZFwiKTtcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRCdXR0b24pO1xuICAgICAgICBzdHVkZW50VGFibGUuYXBwZW5kQ2hpbGQodHIpO1xuXG4gICAgICAgIGRlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2lsbWVcIik7XG4gICAgICAgICAgICBhd2FpdCBzdHVkZW50U2VydmljZS5kZWxldGVTdHVkZW50KE51bWJlcihkZWxldGVCdXR0b24uZGF0YXNldC5pZCkpO1xuICAgICAgICAgICAgc2hvd0xpc3RzKCk7XG4gICAgICAgICAgICBhbGVydChcIsOWxJ9yZW5jaSBTaWxpbmRpXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdXBkYXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgc2VsZWN0ZWRTdHVkZW50ID0gc3R1ZGVudDtcbiAgICAgICAgICAgIG5hbWVJbnB1dC52YWx1ZSA9IHNlbGVjdGVkU3R1ZGVudC5nZXROYW1lKCk7XG4gICAgICAgICAgICBzdXJuYW1lSW5wdXQudmFsdWUgPSBzZWxlY3RlZFN0dWRlbnQuZ2V0U3VybmFtZSgpO1xuICAgICAgICAgICAgZGVsZXRlQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgIGFkZFN0dWRlbnRCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgdXBkYXRlU3R1ZGVudEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgdXBkYXRlU3R1ZGVudEJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIsIHNlbGVjdGVkU3R1ZGVudC5nZXRJZCgpLnRvU3RyaW5nKCkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdGFrZUF0dGVuZGFuY2VMaXN0KCkge1xuICAgIHRha2VBdHRlbmRhbmNlVGFibGUuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAoYXdhaXQgc3R1ZGVudFNlcnZpY2UuZ2V0U3R1ZGVudHMoKSkuZm9yRWFjaCgoc3R1ZGVudDogU3R1ZGVudCkgPT4ge1xuICAgICAgICBjb25zdCB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcbiAgICAgICAgY29uc3QgdGRJZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgdGROYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCB0ZFN1cm5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuICAgICAgICBjb25zdCBvcHRpb24xID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgICAgY29uc3Qgb3B0aW9uMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG5cbiAgICAgICAgdGRJZC5pbm5lckhUTUwgPSBzdHVkZW50LmdldElkKCkudG9TdHJpbmcoKTtcbiAgICAgICAgdGROYW1lLmlubmVyVGV4dCA9IHN0dWRlbnQuZ2V0TmFtZSgpO1xuICAgICAgICB0ZFN1cm5hbWUuaW5uZXJUZXh0ID0gc3R1ZGVudC5nZXRTdXJuYW1lKCk7XG4gICAgICAgIHNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImZvcm0tc2VsZWN0XCIpO1xuICAgICAgICBzZWxlY3Quc2V0QXR0cmlidXRlKFwibmFtZVwiLCBcInNlbGVjdEFic2VuY2VcIik7XG4gICAgICAgIHNlbGVjdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIFwic2VsZWN0IGV4YW1wbGVcIik7XG4gICAgICAgIG9wdGlvbjEuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCIrXCIpO1xuICAgICAgICBvcHRpb24yLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiLVwiKTtcbiAgICAgICAgb3B0aW9uMS5pbm5lclRleHQgPSBcIitcIjtcbiAgICAgICAgb3B0aW9uMi5pbm5lclRleHQgPSBcIi1cIjtcblxuICAgICAgICBzZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uMSk7XG4gICAgICAgIHNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24yKTtcbiAgICAgICAgdGRPcHRpb24uYXBwZW5kQ2hpbGQoc2VsZWN0KTtcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRJZCk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkTmFtZSk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkU3VybmFtZSk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkT3B0aW9uKTtcbiAgICAgICAgdGFrZUF0dGVuZGFuY2VUYWJsZS5hcHBlbmRDaGlsZCh0cik7XG4gICAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxpc3RBdHRlbmRhbmNlKCkge1xuICAgIGxpc3RBdHRlbmRhbmNlQm9keS5pbm5lckhUTUwgPSBcIlwiO1xuXG4gICAgKGF3YWl0IGF0dGVuZGFuY2VTZXJ2aWNlLmdldEF0dGVuZGFuY2VzKCkpLmZvckVhY2goKGF0dGVuZGFuY2U6IEF0dGVuZGFuY2UpID0+IHtcbiAgICAgICAgY29uc3QgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG4gICAgICAgIGNvbnN0IHRkSWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgdGRQcmF5ZXJUaW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCB0ZERlbGV0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgdGRVcGRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCBkZWxldGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgICBjb25zdCB1cGRhdGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXG4gICAgICAgIHRkSWQuaW5uZXJIVE1MID0gYXR0ZW5kYW5jZS5nZXRJZCgpLnRvU3RyaW5nKCk7XG4gICAgICAgIHRkRGF0ZS5pbm5lclRleHQgPSBhdHRlbmRhbmNlLmdldFRvZGF5KCk7XG4gICAgICAgIHRkUHJheWVyVGltZS5pbm5lclRleHQgPSBhdHRlbmRhbmNlLmdldFByYXllclRpbWUoKTtcbiAgICAgICAgZGVsZXRlQnV0dG9uLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiYnRuIGJ0bi1kYW5nZXJcIik7XG4gICAgICAgIGRlbGV0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImRlbGV0ZUJ1dHRvblwiKTtcbiAgICAgICAgZGVsZXRlQnV0dG9uLnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIiwgYXR0ZW5kYW5jZS5nZXRJZCgpLnRvU3RyaW5nKCkpO1xuICAgICAgICBkZWxldGVCdXR0b24uaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmFzIGZhLXRyYXNoLWFsdFwiPjwvaT4nO1xuICAgICAgICB1cGRhdGVCdXR0b24uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJidG4gYnRuLXByaW1hcnlcIik7XG4gICAgICAgIHVwZGF0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInVwZGF0ZUJ1dHRvblwiKTtcbiAgICAgICAgdXBkYXRlQnV0dG9uLnNldEF0dHJpYnV0ZShcImRhdGEtaWRcIiwgYXR0ZW5kYW5jZS5nZXRJZCgpLnRvU3RyaW5nKCkpO1xuICAgICAgICB1cGRhdGVCdXR0b24uaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmEtc29saWQgZmEtZWRpdFwiPjwvaT4nO1xuICAgICAgICB0ZERlbGV0ZS5hcHBlbmRDaGlsZChkZWxldGVCdXR0b24pO1xuICAgICAgICB0ZFVwZGF0ZS5hcHBlbmRDaGlsZCh1cGRhdGVCdXR0b24pO1xuICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZElkKTtcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGREYXRlKTtcbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRQcmF5ZXJUaW1lKTtcbiAgICAgICAgdGRCdXR0b24uYXBwZW5kQ2hpbGQodGREZWxldGUpO1xuICAgICAgICB0ZEJ1dHRvbi5hcHBlbmRDaGlsZCh0ZFVwZGF0ZSk7XG4gICAgICAgIHRkQnV0dG9uLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiZC1mbGV4IGp1c3RpZnktY29udGVudC1hcm91bmRcIik7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkQnV0dG9uKTtcbiAgICAgICAgbGlzdEF0dGVuZGFuY2VCb2R5LmFwcGVuZENoaWxkKHRyKTtcblxuICAgICAgICBkZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNpbG1lXCIpO1xuICAgICAgICAgICAgYXdhaXQgYXR0ZW5kYW5jZVNlcnZpY2UuZGVsZXRlQXR0ZW5kYW5jZShOdW1iZXIoZGVsZXRlQnV0dG9uLmRhdGFzZXQuaWQpKTtcbiAgICAgICAgICAgIHNob3dMaXN0cygpO1xuICAgICAgICAgICAgbGlzdEF0dGVuZGFuY2VzRm9yU3R1ZGVudHMoKTtcbiAgICAgICAgICAgIGxpc3RTdHVkZW50c0ZvckF0dGVuZGFuY2UoKTtcbiAgICAgICAgICAgIGFsZXJ0KFwiWW9rbGFtYSBTaWxpbmRpXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdXBkYXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgc2VsZWN0ZWRBdHRlbmRhbmNlSWQgPSBhdHRlbmRhbmNlLmdldElkKCk7XG4gICAgICAgICAgICBzZWxlY3RQcmF5ZXJUaW1lLnZhbHVlID0gYXR0ZW5kYW5jZS5nZXRQcmF5ZXJUaW1lKCk7XG4gICAgICAgICAgICBkZWxldGVCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgdXBkYXRlQXR0ZW5kYW5jZUJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgdGFrZUF0dGVuZGFuY2VCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgdXBkYXRlQXR0ZW5kYW5jZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIsIHNlbGVjdGVkQXR0ZW5kYW5jZUlkLnRvU3RyaW5nKCkpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuLyogU2XDp2lsZW4geW9rbGFtYSBsaXN0ZXNpbmluaW4gdGFsZWJlbGVyaW5pIGfDtnN0ZXJpci4gKi9cbmFzeW5jIGZ1bmN0aW9uIGxpc3RBdHRlbmRhbmNlc0ZvclN0dWRlbnRzKCkge1xuICAgIG15U2VsZWN0QXR0ZW5kYW5jZUlkLmlubmVySFRNTCA9IFwiXCI7XG4gICAgY29uc3QgYXR0ZW5kYW5jZUxpc3QgPSBhd2FpdCBhdHRlbmRhbmNlU2VydmljZS5nZXRBdHRlbmRhbmNlcygpO1xuICAgIChhd2FpdCBhdHRlbmRhbmNlTGlzdCkuZm9yRWFjaCgoYXR0ZW5kYW5jZSkgPT4ge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICBvcHRpb24uc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgYXR0ZW5kYW5jZS5nZXRJZCgpLnRvU3RyaW5nKCkpO1xuICAgICAgICBvcHRpb24uaW5uZXJUZXh0ID0gYXR0ZW5kYW5jZS5nZXRUb2RheSgpICsgXCIgXCIgKyBhdHRlbmRhbmNlLmdldFByYXllclRpbWUoKTtcbiAgICAgICAgbXlTZWxlY3RBdHRlbmRhbmNlSWQuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICB9KTtcblxufVxuXG5hc3luYyBmdW5jdGlvbiBsaXN0U3R1ZGVudHNXaXRoQXR0ZW5kYW5jZUlkKGF0dGVuZGFuY2VJZDogbnVtYmVyKSB7XG4gICAgY29uc29sZS5sb2coXCJZb2thbG1heWEgZ8O2cmUgVGFsZWJlIExpc3RlbGVtZVwiKTtcbiAgICB0Ym9keUxpc3RGb3JBdHRlbmRhbmNlLmlubmVySFRNTCA9IFwiXCI7XG4gICAgY29uc3Qgc3R1ZGVudEF0dGVuZGFuY2VGaWx0ZXIgPSBhd2FpdCBhdHRlbmRhbmNlU2VydmljZS5nZXRBdHRlbmRhbmNlc0J5QXR0ZW5kYW5jZUlkKGF0dGVuZGFuY2VJZCk7XG4gICAgY29uc29sZS5sb2coc3R1ZGVudEF0dGVuZGFuY2VGaWx0ZXIpO1xuICAgIHN0dWRlbnRBdHRlbmRhbmNlRmlsdGVyLmZvckVhY2goKHN0dWRlbnRBdHRlbmRhbmNlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICAgICAgICBjb25zdCB0ZElkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xuICAgICAgICBjb25zdCB0ZE5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkU3VybmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgdGRBYnNlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG5cbiAgICAgICAgdGRJZC5pbm5lckhUTUwgPSBzdHVkZW50QXR0ZW5kYW5jZS5nZXRTdHVkZW50KCkuZ2V0SWQoKS50b1N0cmluZygpO1xuICAgICAgICB0ZE5hbWUuaW5uZXJIVE1MID0gc3R1ZGVudEF0dGVuZGFuY2UuZ2V0U3R1ZGVudCgpLmdldE5hbWUoKTtcbiAgICAgICAgdGRTdXJuYW1lLmlubmVySFRNTCA9IHN0dWRlbnRBdHRlbmRhbmNlLmdldFN0dWRlbnQoKS5nZXRTdXJuYW1lKCk7XG4gICAgICAgIHRkQWJzZW50LmlubmVySFRNTCA9IHN0dWRlbnRBdHRlbmRhbmNlLmdldElzQWJzZW5jZVRvU3RyaW5nKCk7XG5cbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRJZCk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkTmFtZSk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkU3VybmFtZSk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkQWJzZW50KTtcbiAgICAgICAgdGJvZHlMaXN0Rm9yQXR0ZW5kYW5jZS5hcHBlbmRDaGlsZCh0cik7XG4gICAgfSk7XG59XG5cbi8qIFNlw6dpbGVuIMO2xJ9yZW5jaW5pbiB5b2tsYW1hIGxpc3Rlc2luaSBnw7ZzdGVyaXIuICovXG5hc3luYyBmdW5jdGlvbiBsaXN0U3R1ZGVudHNGb3JBdHRlbmRhbmNlKCkge1xuICAgIGNvbnN0IHN0dWRlbnRMaXN0ID0gYXdhaXQgc3R1ZGVudFNlcnZpY2UuZ2V0U3R1ZGVudHMoKTtcbiAgICBteVNlbGVjdFN0dWRlbnRJZC5pbm5lckhUTUwgPSBcIlwiO1xuICAgIHN0dWRlbnRMaXN0LmZvckVhY2goKHN0dWRlbnQpID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIHN0dWRlbnQuZ2V0SWQoKS50b1N0cmluZygpKTtcbiAgICAgICAgb3B0aW9uLmlubmVyVGV4dCA9IHN0dWRlbnQuZ2V0TmFtZSgpICsgXCIgXCIgKyBzdHVkZW50LmdldFN1cm5hbWUoKTtcbiAgICAgICAgbXlTZWxlY3RTdHVkZW50SWQuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICB9KTtcblxufVxuXG5hc3luYyBmdW5jdGlvbiBsaXN0QXR0ZW5kYW5jZVdpdGhTdHVkZW50SWQoc3R1ZGVudElkOiBudW1iZXIpIHtcbiAgICBjb25zb2xlLmxvZyhcIlRhbGViZXllIGfDtnJlIFlva2xhbWEgTGlzdGVsZW1lXCIpO1xuICAgIHRib2R5TGlzdFdpdGhTdHVkZW50SWQuaW5uZXJIVE1MID0gXCJcIjtcbiAgICBjb25zdCBzdHVkZW50QXR0ZW5kYW5jZUZpbHRlciA9IGF3YWl0IGF0dGVuZGFuY2VTZXJ2aWNlLmdldEF0dGVuZGFuY2VzQnlTdHVkZW50SWQoc3R1ZGVudElkKTtcbiAgICBjb25zb2xlLmxvZyhzdHVkZW50QXR0ZW5kYW5jZUZpbHRlcik7XG4gICAgc3R1ZGVudEF0dGVuZGFuY2VGaWx0ZXIuZm9yRWFjaCgoc3R1ZGVudEF0dGVuZGFuY2UpID0+IHtcbiAgICAgICAgY29uc3QgdHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG4gICAgICAgIGNvbnN0IHRkVG9kYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICAgIGNvbnN0IHRkUHJheWVyVGltZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcbiAgICAgICAgY29uc3QgdGRBYnNlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG5cbiAgICAgICAgdGRUb2RheS5pbm5lckhUTUwgPSBzdHVkZW50QXR0ZW5kYW5jZS5nZXRBdHRlbmRhbmNlKCkuZ2V0VG9kYXkoKTtcbiAgICAgICAgdGRQcmF5ZXJUaW1lLmlubmVySFRNTCA9IHN0dWRlbnRBdHRlbmRhbmNlLmdldEF0dGVuZGFuY2UoKS5nZXRQcmF5ZXJUaW1lKCk7XG4gICAgICAgIHRkQWJzZW50LmlubmVySFRNTCA9IHN0dWRlbnRBdHRlbmRhbmNlLmdldElzQWJzZW5jZVRvU3RyaW5nKCk7XG5cbiAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGRUb2RheSk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkUHJheWVyVGltZSk7XG4gICAgICAgIHRyLmFwcGVuZENoaWxkKHRkQWJzZW50KTtcbiAgICAgICAgdGJvZHlMaXN0V2l0aFN0dWRlbnRJZC5hcHBlbmRDaGlsZCh0cik7XG4gICAgfSk7XG59Il0sIm5hbWVzIjpbImdsb2JhbCIsInNlbGYiLCJ3aW5kb3ciLCJFcnJvciIsImdldEdsb2JhbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJmZXRjaCIsImJpbmQiLCJIZWFkZXJzIiwiUmVxdWVzdCIsIlJlc3BvbnNlIiwiY29uc3RydWN0b3IiLCJpZCIsInByYXllclRpbWUiLCJkYXRlIiwiX2RhdGUiLCJEYXRlIiwiX3RvZGF5IiwidGhpcyIsImdldERhdGUiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsIl9pZCIsIl9wcmF5ZXJUaW1lIiwiZ2V0SWQiLCJnZXRQcmF5ZXJUaW1lIiwic2V0UHJheWVyVGltZSIsImdldFRvZGF5Iiwic2hvd0luZm9BdHRlbmRhbmNlIiwiY29uc29sZSIsImxvZyIsIm5hbWUiLCJzdXJuYW1lIiwiYWJzZW50IiwiX25hbWUiLCJfc3VybmFtZSIsIl9hYnNlbnQiLCJnZXROYW1lIiwiZ2V0U3VybmFtZSIsImdldEFic2VudCIsInNldE5hbWUiLCJzZXRTdXJuYW1lIiwic2hvd0luZm9TdHVkZW50Iiwic3R1ZGVudCIsImF0dGVuZGFuY2UiLCJpc0Fic2VuY2UiLCJfc3R1ZGVudCIsIl9hdHRlbmRhbmNlIiwiX2lzQWJzZW5jZSIsImdldEF0dGVuZGFuY2UiLCJnZXRTdHVkZW50IiwiZ2V0SXNBYnNlbmNlIiwiZ2V0SXNBYnNlbmNlVG9TdHJpbmciLCJzaG93SW5mb1N0dWRlbnRBdHRlbmRhbmNlIiwic3R1ZGVudElkIiwiZ2V0U3R1ZGVudElkIiwic2hvd0luZm9TdHVkZW50QXR0ZW5kYW5jZURUTyIsImFwaVVybCIsIl9hdHRlbmRhbmNlcyIsIl9zdHVkZW50QXR0ZW5kYW5jZXMiLCJhc3luYyIsInJlc3BvbnNlIiwibWV0aG9kIiwiaGVhZGVycyIsIkFjY2VwdCIsIm9rIiwic3RhdHVzIiwicmVzdWx0IiwianNvbiIsImZvckVhY2giLCJvYmplY3QiLCJwdXNoIiwiQXR0ZW5kYW5jZSIsIm1hcCIsInN0dWRlbnRBdHRlbmRhbmNlIiwiU3R1ZGVudEF0dGVuZGFuY2UiLCJTdHVkZW50Iiwic3R1ZGVudEF0dGVuZGFuY2VzIiwic3R1ZGVudEF0dGVuZGFuY2VEdG8iLCJpc0VtcHR5IiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGF0dXNUZXh0IiwicmVnTmFtZSIsInJlZ1N1cm5hbWUiLCJfc3R1ZGVudHMiLCJ2YWxpZGF0ZVN0dWRlbnQiLCJpc1ZhbGlkIiwidGVzdCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIiwic3R1ZGVudFNlcnZpY2UiLCJTdHVkZW50U2VydmljZSIsImF0dGVuZGFuY2VTZXJ2aWNlIiwiQXR0ZW5kYW5jZVNlcnZpY2UiLCJhZGRTdHVkZW50QnV0dG9uIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInVwZGF0ZVN0dWRlbnRCdXR0b24iLCJ0YWtlQXR0ZW5kYW5jZUJ1dHRvbiIsInVwZGF0ZUF0dGVuZGFuY2VCdXR0b24iLCJuYW1lSW5wdXQiLCJzdXJuYW1lSW5wdXQiLCJzZWxlY3RQcmF5ZXJUaW1lIiwic2VsZWN0TGlzdCIsImdldEVsZW1lbnRzQnlOYW1lIiwibXlTZWxlY3RBdHRlbmRhbmNlSWQiLCJteVNlbGVjdFN0dWRlbnRJZCIsInN0dWRlbnRUYWJsZSIsInRha2VBdHRlbmRhbmNlVGFibGUiLCJsaXN0QXR0ZW5kYW5jZUJvZHkiLCJ0Ym9keUxpc3RGb3JBdHRlbmRhbmNlIiwidGJvZHlMaXN0V2l0aFN0dWRlbnRJZCIsInNlbGVjdGVkU3R1ZGVudCIsInNlbGVjdGVkQXR0ZW5kYW5jZUlkIiwic2hvd0xpc3RzIiwiaW5uZXJIVE1MIiwiZ2V0U3R1ZGVudHMiLCJ0ciIsImNyZWF0ZUVsZW1lbnQiLCJ0ZElkIiwidGROYW1lIiwidGRTdXJuYW1lIiwidGRBYnNlbnQiLCJ0ZERlbGV0ZSIsInRkVXBkYXRlIiwidGRCdXR0b24iLCJkZWxldGVCdXR0b24iLCJ1cGRhdGVCdXR0b24iLCJ0b1N0cmluZyIsImlubmVyVGV4dCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImRlbGV0ZVN0dWRlbnQiLCJOdW1iZXIiLCJkYXRhc2V0IiwiYWxlcnQiLCJ2YWx1ZSIsInN0eWxlIiwiZGlzcGxheSIsInNob3dTdHVkZW50TGlzdCIsInRkT3B0aW9uIiwic2VsZWN0Iiwib3B0aW9uMSIsIm9wdGlvbjIiLCJ0YWtlQXR0ZW5kYW5jZUxpc3QiLCJnZXRBdHRlbmRhbmNlcyIsInRkRGF0ZSIsInRkUHJheWVyVGltZSIsImRlbGV0ZUF0dGVuZGFuY2UiLCJsaXN0QXR0ZW5kYW5jZXNGb3JTdHVkZW50cyIsImxpc3RTdHVkZW50c0ZvckF0dGVuZGFuY2UiLCJsaXN0QXR0ZW5kYW5jZSIsImF0dGVuZGFuY2VMaXN0Iiwib3B0aW9uIiwic3R1ZGVudExpc3QiLCJhZGRTdHVkZW50IiwidXBkYXRlU3R1ZGVudCIsIkFycmF5IiwiaW5kZXgiLCJTdHVkZW50QXR0ZW5kYW5jZURUTyIsInRha2VBdHRlbmRhbmNlIiwidGhlbiIsInVwZGF0ZUF0dGVuZGFuY2UiLCJhdHRlbmRhbmNlSWQiLCJzdHVkZW50QXR0ZW5kYW5jZUZpbHRlciIsImdldEF0dGVuZGFuY2VzQnlBdHRlbmRhbmNlSWQiLCJsaXN0U3R1ZGVudHNXaXRoQXR0ZW5kYW5jZUlkIiwiZ2V0QXR0ZW5kYW5jZXNCeVN0dWRlbnRJZCIsInRkVG9kYXkiLCJsaXN0QXR0ZW5kYW5jZVdpdGhTdHVkZW50SWQiXSwic291cmNlUm9vdCI6IiJ9
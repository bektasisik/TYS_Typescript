(()=>{"use strict";var e={300:(e,t)=>{var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();e.exports=t=n.fetch,n.fetch&&(t.default=n.fetch.bind(n)),t.Headers=n.Headers,t.Request=n.Request,t.Response=n.Response},674:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Attendance=void 0,t.Attendance=class{constructor(e,t){this.date=new Date,this.today=this.date.getDate()+"/"+(this.date.getMonth()+1)+"/"+this.date.getFullYear()+" "+this.date.getHours()+":"+this.date.getMinutes()+":"+this.date.getSeconds(),this.id=e,this.prayerTime=t}showInfoAttendance(){console.log(this.id+" "+this.prayerTime+" "+this.today)}}},406:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Student=void 0,t.Student=class{constructor(e,t,n){this.id=e,this.name=t,this.surname=n,this.absent=0}increaseAbsent(){this.absent=this.absent+1}setName(e){this.name=e}setSurname(e){this.surname=e}showInfoStudent(){console.log(this.name+" "+this.surname+" "+this.absent)}}},669:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.StudentAttendance=void 0,t.StudentAttendance=class{constructor(e,t,n){this.student=e,this.attendance=t,this.isAbsence=n}getAttendance(){return this.attendance}getStudent(){return this.student}getIsAbsenceToString(){return this.isAbsence?"Var":"Yok"}showInfoStudentAttendance(){console.log(this.student+" "+this.attendance+" "+this.getIsAbsenceToString)}}},711:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AttendanceService=void 0;const a=n(674),s=n(669);var d="http://localhost:3002/api/v1";t.AttendanceService=class{constructor(){this._attendances=[],this._studentAttendances=[],this._sequence=1}getAttendanceList(){return this._attendances}getAttendance(e){return this._attendances.filter((t=>t.id===e))[0]}getStudentAttendances(){return this._studentAttendances}async getAttendancesByAttendanceId(e){const t=await fetch(d+"/attendances/"+e,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=await t.json();return console.log("result is: ",JSON.stringify(n)),this._studentAttendances.filter((t=>t.getAttendance().id===e))}async getAttendancesByStudentId(e){const t=await fetch(d+"/attendances/"+e,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=await t.json();return console.log("result is: ",JSON.stringify(n)),this._studentAttendances.filter((t=>t.getStudent().id===e))}async takeAttendance(e,t){const n=new a.Attendance(this._sequence++,e);t.forEach((async(e,t)=>{const a=new s.StudentAttendance(t,n,e);e||t.increaseAbsent(),this._studentAttendances.push(a)}));const i=await fetch(d+"/attendances",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:this._sequence,prayerTime:e,attendanceMap:t})});if(!i.ok)throw new Error(i.statusText);const o=await i.json();console.log("result is: ",JSON.stringify(o)),this._attendances.push(n)}async updateAttendance(e,t,n){const a=this.getAttendance(e);a&&(a.prayerTime=t,this._studentAttendances=this._studentAttendances.filter((t=>t.getAttendance().id!==e)),n.forEach((async(e,t)=>{const n=new s.StudentAttendance(t,a,e);e||t.increaseAbsent(),this._studentAttendances.push(n)})));const i=await fetch(d+"/attendances/"+e,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:e,prayerTime:t,attendanceMap:n})});if(!i.ok)throw new Error(i.statusText)}async deleteAttendance(e){this.getAttendance(e)&&(this._attendances=this._attendances.filter((t=>t.id!==e)),this._studentAttendances=this._studentAttendances.filter((t=>t.getAttendance().id!==e)));const t=await fetch(d+"/attendances/"+e,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:e})});if(!t.ok)throw new Error(t.statusText)}}},287:function(e,t,n){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.StudentService=void 0;const s=n(406),d=a(n(300));var i="http://localhost:3002/api/v1";t.StudentService=class{constructor(){this._students=[],this._sequence=0}async fetchStudents(){const e=await(0,d.default)(i+"/students",{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);return(await e.json()).forEach((e=>{this._students.push(new s.Student(e.id,e.name,e.surname))})),this._sequence=this._students.length,this._students}getStudents(){return this._students}async addStudent(e,t){const n=await(0,d.default)(i+"/students",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:this._sequence++,name:e,surname:t,absent:0})});if(!n.ok)throw new Error(`Error! status: ${n.status}`);const a=await n.json();console.log("result is: ",JSON.stringify(a));const o=new s.Student(this._sequence,e,t);this._students.push(o)}getStudent(e){return window.fetch(i+"/students/"+e,{method:"GET"}).then((e=>e.json())).then((e=>{console.log(e)})),this._students.find((t=>t.id===e))}getStudentById(e){return this._students.find((t=>t.id===e))}async updateStudent(e,t,n){const a=await(0,d.default)(i+"/students/"+e.id,{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({name:t,surname:n})});if(!a.ok)throw new Error(`Error! status: ${a.status}`);const s=await a.json();console.log("result is: ",JSON.stringify(s)),e.name=t,e.surname=n}async deleteStudent(e){const t=await(0,d.default)(i+"/students/"+e,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=await t.json();console.log("result is: ",JSON.stringify(n));const a=this._students.filter((t=>t.id!==e));this._students=a}async deleteStudentWithId(e){const t=await(0,d.default)(i+"/students/"+e,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const n=await t.json();console.log("result is: ",JSON.stringify(n));const a=this._students.filter((t=>t.id!==e));this._students=a}}}},t={};function n(a){var s=t[a];if(void 0!==s)return s.exports;var d=t[a]={exports:{}};return e[a].call(d.exports,d,d.exports,n),d.exports}(()=>{const e=n(287),t=n(711),a=new e.StudentService,s=new t.AttendanceService,d=document.getElementById("addStudentButton"),i=document.getElementById("updateStudentButton"),o=document.getElementById("takeAttendanceButton"),r=document.getElementById("updateAttendanceButton"),c=document.getElementById("nameInput"),l=document.getElementById("surnameInput"),u=document.getElementById("selectPrayerTime"),h=document.getElementsByName("selectAbsence"),p=document.getElementById("selectListWithAttendanceId"),m=document.getElementById("mySelectStudentId"),f=document.getElementById("studentListBody"),g=document.getElementById("takeAttendanceBody"),y=document.getElementById("listAttendanceBody"),E=document.getElementById("tbodyListForAttendance"),A=document.getElementById("tbodyListWithStudentId");a.fetchStudents().then((()=>{w()}));var S=/^[a-zA-ZğüşıöçĞÜŞİÖÇ ]{3,20}$/,b=/^[a-zA-ZğüşıöçĞÜŞİÖÇ ]{2,20}$/;let v,T;function w(){!async function(){f.innerHTML="",a.getStudents().forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),s=document.createElement("td"),o=document.createElement("td"),r=document.createElement("td"),u=document.createElement("td"),h=document.createElement("td"),p=document.createElement("td"),m=document.createElement("button"),g=document.createElement("button");n.innerHTML=e.id.toString(),s.innerText=e.name,o.innerText=e.surname,r.innerText=e.absent.toString(),m.setAttribute("class","btn btn-danger"),m.setAttribute("id","deleteButton"),m.setAttribute("data-id",e.id.toString()),m.innerHTML='<i class="fas fa-trash-alt"></i>',g.setAttribute("class","btn btn-primary"),g.setAttribute("id","updateButton"),g.setAttribute("data-id",e.id.toString()),g.innerHTML='<i class="fa-solid fa-edit"></i>',u.appendChild(m),h.appendChild(g),t.appendChild(n),t.appendChild(s),t.appendChild(o),t.appendChild(r),p.appendChild(u),p.appendChild(h),p.setAttribute("class","d-flex justify-content-around"),t.appendChild(p),f.appendChild(t),m.addEventListener("click",(async e=>{e.preventDefault(),console.log("Silme"),await a.deleteStudent(Number(m.dataset.id)),w(),alert("Öğrenci Silindi")})),g.addEventListener("click",(t=>{t.preventDefault(),v=e,c.value=v.name,l.value=v.surname,d.style.display="none",i.style.display="block",i.setAttribute("data-id",v.id.toString())}))}))}(),async function(){g.innerHTML="",a.getStudents().forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),s=document.createElement("td"),d=document.createElement("td"),i=document.createElement("select"),o=document.createElement("option"),r=document.createElement("option");n.innerHTML=e.id.toString(),a.innerText=e.name,s.innerText=e.surname,i.setAttribute("class","form-select"),i.setAttribute("name","selectAbsence"),i.setAttribute("aria-label","select example"),o.setAttribute("value","+"),r.setAttribute("value","-"),o.innerText="+",r.innerText="-",i.appendChild(o),i.appendChild(r),d.appendChild(i),t.appendChild(n),t.appendChild(a),t.appendChild(s),t.appendChild(d),g.appendChild(t)}))}(),function(){const e=s.getAttendanceList();p.innerHTML="",e.forEach((e=>{const t=document.createElement("option");t.setAttribute("value",e.id.toString()),t.innerText=e.today+" "+e.prayerTime,p.appendChild(t)}))}(),async function(){const e=a.getStudents();m.innerHTML="",e.forEach((e=>{const t=document.createElement("option");t.setAttribute("value",e.id.toString()),t.innerText=e.name+" "+e.surname,m.appendChild(t)}))}(),k()}async function k(){y.innerHTML="",s.getAttendanceList().forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),i=document.createElement("td"),c=document.createElement("td"),l=document.createElement("td"),h=document.createElement("button"),p=document.createElement("button");n.innerHTML=e.id.toString(),a.innerText=e.today,d.innerText=e.prayerTime,h.setAttribute("class","btn btn-danger"),h.setAttribute("id","deleteButton"),h.setAttribute("data-id",e.id.toString()),h.innerHTML='<i class="fas fa-trash-alt"></i>',p.setAttribute("class","btn btn-primary"),p.setAttribute("id","updateButton"),p.setAttribute("data-id",e.id.toString()),p.innerHTML='<i class="fa-solid fa-edit"></i>',i.appendChild(h),c.appendChild(p),t.appendChild(n),t.appendChild(a),t.appendChild(d),l.appendChild(i),l.appendChild(c),l.setAttribute("class","d-flex justify-content-around"),t.appendChild(l),y.appendChild(t),h.addEventListener("click",(async e=>{e.preventDefault(),console.log("Silme"),await s.deleteAttendance(Number(h.dataset.id)),w(),k(),alert("Yoklama Silindi")})),p.addEventListener("click",(t=>{t.preventDefault(),T=e.id,u.value=e.prayerTime,r.style.display="block",o.style.display="none",r.setAttribute("data-id",T.toString())}))}))}d.addEventListener("click",(async e=>{e.preventDefault(),console.log("Ekleme"),S.test(c.value)&&b.test(l.value)?(await a.addStudent(c.value,l.value),w(),alert(c.value+" "+l.value+"\nÖğrenci Eklendi"),c.value="",l.value=""):alert("Talebe ADI ve SOYADI uygun formatta değil\n3-20 karakter arası sadece harf giriniz\nÖrnek: Bektaş Işık")})),i.addEventListener("click",(async e=>{e.preventDefault(),console.log("Güncelleme"),S.test(c.value)&&b.test(l.value)?(await a.updateStudent(v,c.value,l.value),c.value="",l.value="",d.style.display="block",i.style.display="none",w(),alert("Öğrenci Güncellendi")):alert("Talebe ADI ve SOYADI uygun formatta değil\n3-20 karakter arası sadece harf giriniz\nÖrnek: Bektaş Işık")})),o.addEventListener("click",(async e=>{e.preventDefault(),console.log("Yoklama alma");const t=new Map;a.getStudents().forEach(((e,n)=>{t.set(e,"+"===h[n].value)})),""!==u.value?(await s.takeAttendance(u.value,t),w(),alert(u.value+" Yoklaması Alındı")):alert("Lütfen Vakti Seçiniz")})),r.addEventListener("click",(async e=>{e.preventDefault(),console.log("Yoklama güncelleme");const t=new Map;a.getStudents().forEach(((e,n)=>{t.set(e,"+"===h[n].value)})),await s.updateAttendance(T,u.value,t),console.log(s.getAttendanceList()),o.style.display="block",r.style.display="none",w(),alert(u.value+"Yoklaması Güncellendi")})),p.addEventListener("click",(e=>{e.preventDefault(),console.log("Yoklama Seçildi"),async function(e){console.log("Yokalmaya göre Talebe Listeleme"),E.innerHTML="";const t=await s.getAttendancesByAttendanceId(e);console.log(t),t.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),s=document.createElement("td"),d=document.createElement("td");n.innerHTML=e.getStudent().id.toString(),a.innerHTML=e.getStudent().name,s.innerHTML=e.getStudent().surname,d.innerHTML=e.getIsAbsenceToString(),t.appendChild(n),t.appendChild(a),t.appendChild(s),t.appendChild(d),E.appendChild(t)}))}(Number(p.value)),alert("Seçilen Yoklamanın Öğrencileri Listelendi")})),m.addEventListener("click",(e=>{e.preventDefault(),console.log("Talebe Seçildi"),async function(e){console.log("Talebeye göre Yoklama Listeleme"),A.innerHTML="";const t=await s.getAttendancesByStudentId(e);console.log(t),t.forEach((e=>{const t=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),s=document.createElement("td");n.innerHTML=e.getAttendance().today,a.innerHTML=e.getAttendance().prayerTime,s.innerHTML=e.getIsAbsenceToString(),t.appendChild(n),t.appendChild(a),t.appendChild(s),A.appendChild(t)}))}(Number(m.value)),alert("Seçilen Öğrencinin Yoklamaları Listelendi")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";var t={300:(t,e)=>{var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();t.exports=e=n.fetch,n.fetch&&(e.default=n.fetch.bind(n)),e.Headers=n.Headers,e.Request=n.Request,e.Response=n.Response},674:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Attendance=void 0,e.Attendance=class{constructor(t,e){this.date=new Date,this.today=this.date.getDate()+"/"+(this.date.getMonth()+1)+"/"+this.date.getFullYear()+" "+this.date.getHours()+":"+this.date.getMinutes()+":"+this.date.getSeconds(),this.id=t,this.prayerTime=e}showInfoAttendance(){console.log(this.id+" "+this.prayerTime+" "+this.today)}}},406:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Student=void 0,e.Student=class{constructor(t,e,n){this.id=t,this.name=e,this.surname=n,this.absent=0}increaseAbsent(){this.absent=this.absent+1}setName(t){this.name=t}setSurname(t){this.surname=t}showInfoStudent(){console.log(this.name+" "+this.surname+" "+this.absent)}}},669:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.StudentAttendance=void 0,e.StudentAttendance=class{constructor(t,e,n){this.student=t,this.attendance=e,this.isAbsence=n}getAttendance(){return this.attendance}getStudent(){return this.student}getIsAbsenceToString(){return this.isAbsence?"Var":"Yok"}showInfoStudentAttendance(){console.log(this.student+" "+this.attendance+" "+this.getIsAbsenceToString)}}},711:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AttendanceService=void 0;const s=n(674),a=n(669);var d="http://localhost:3002/api/v1";e.AttendanceService=class{constructor(){this._attendances=[],this._studentAttendances=[],this._sequence=1}getAttendanceList(){return this._attendances}getAttendance(t){return this._attendances.filter((e=>e.id===t))[0]}getStudentAttendances(){return this._studentAttendances}async getAttendancesByAttendanceId(t){const e=await fetch(d+"/attendance/"+t,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const n=await e.json();return console.log("result is: ",JSON.stringify(n)),this._studentAttendances.filter((e=>e.getAttendance().id===t))}async getAttendancesByStudentId(t){const e=await fetch(d+"/attendance/"+t,{method:"GET",headers:{Accept:"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const n=await e.json();return console.log("result is: ",JSON.stringify(n)),this._studentAttendances.filter((e=>e.getStudent().id===t))}async takeAttendance(t,e){const n=await fetch(d+"/attendance",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:this._sequence,prayerTime:t,attendanceMap:e})});if(!n.ok)throw new Error(n.statusText);const i=await n.json();console.log("result is: ",JSON.stringify(i));const o=new s.Attendance(this._sequence++,t);this._attendances.push(o),e.forEach(((t,e)=>{const n=new a.StudentAttendance(e,o,t);t||e.increaseAbsent(),this._studentAttendances.push(n)}))}async updateAttendance(t,e,n){await fetch(d+"/attendance/"+t,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:t,prayerTime:e,attendanceMap:n})});const s=this.getAttendance(t);s&&(s.prayerTime=e,n.forEach(((t,e)=>{const n=new a.StudentAttendance(e,s,t);t||e.increaseAbsent(),this._studentAttendances.push(n)})))}async deleteAttendance(t){await fetch(d+"/attendance/"+t,{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:t})}),this.getAttendance(t)&&(this._attendances=this._attendances.filter((e=>e.id!==t)),this._studentAttendances=this._studentAttendances.filter((e=>e.getAttendance().id!==t)))}}},287:function(t,e,n){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.StudentService=void 0;const a=n(406),d=s(n(300));var i="http://localhost:3002/api/v1";e.StudentService=class{constructor(){this._students=[],this._sequence=0}async fetchStudents(){const t=await(0,d.default)(i+"/students",{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const e=await t.json();return this._students=JSON.parse(JSON.stringify(e)),this._sequence=this._students.length,this._students}getStudents(){return this._students}async addStudent(t,e){const n=await(0,d.default)(i+"/students",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:this._sequence++,name:t,surname:e,absent:0})});if(!n.ok)throw new Error(`Error! status: ${n.status}`);const s=await n.json();console.log("result is: ",JSON.stringify(s));const o=new a.Student(this._sequence,t,e);this._students.push(o)}async addStudentWithId(t,e,n){const s=await(0,d.default)(i+"/students",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:t,name:e,surname:n,absent:0})});if(!s.ok)throw new Error(`Error! status: ${s.status}`);const o=await s.json();console.log("result is: ",JSON.stringify(o));const c=new a.Student(t,e,n);this._students.push(c)}getStudent(t){return window.fetch(i+"/students/"+t,{method:"GET"}).then((t=>t.json())).then((t=>{console.log(t)})),this._students.find((e=>e.id===t))}getStudentById(t){return this._students.find((e=>e.id===t))}async updateStudent(t,e,n){const s=await(0,d.default)(i+"/students/"+t.id,{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({name:e,surname:n})});if(!s.ok)throw new Error(`Error! status: ${s.status}`);const a=await s.json();console.log("result is: ",JSON.stringify(a)),t.name=e,t.surname=n}async deleteStudent(t){const e=await(0,d.default)(i+"/students/"+t,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const n=await e.json();console.log("result is: ",JSON.stringify(n));const s=this._students.filter((e=>e.id!==t));this._students=s}async deleteStudentWithId(t){const e=await(0,d.default)(i+"/students/"+t,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const n=await e.json();console.log("result is: ",JSON.stringify(n));const s=this._students.filter((e=>e.id!==t));this._students=s}}}},e={};function n(s){var a=e[s];if(void 0!==a)return a.exports;var d=e[s]={exports:{}};return t[s].call(d.exports,d,d.exports,n),d.exports}(()=>{const t=n(287),e=n(711),s=new t.StudentService,a=new e.AttendanceService,d=document.getElementById("addStudentButton"),i=document.getElementById("updateStudentButton"),o=document.getElementById("takeAttendanceButton"),c=document.getElementById("updateAttendanceButton"),r=document.getElementById("nameInput"),l=document.getElementById("surnameInput"),u=document.getElementById("selectPrayerTime"),p=document.getElementsByName("selectAbsence"),h=document.getElementById("selectListWithAttendanceId"),m=document.getElementById("mySelectStudentId"),g=document.getElementById("studentListBody"),y=document.getElementById("takeAttendanceBody"),f=document.getElementById("listAttendanceBody"),E=document.getElementById("tbodyListForAttendance"),S=document.getElementById("tbodyListWithStudentId");let A,b;function T(){!async function(){g.innerHTML="",s.getStudents().forEach((t=>{const e=document.createElement("tr"),n=document.createElement("td"),a=document.createElement("td"),o=document.createElement("td"),c=document.createElement("td"),u=document.createElement("td"),p=document.createElement("td"),h=document.createElement("td"),m=document.createElement("button"),y=document.createElement("button");n.innerHTML=t.id.toString(),a.innerText=t.name,o.innerText=t.surname,c.innerText=t.absent.toString(),m.setAttribute("class","btn btn-danger"),m.setAttribute("id","deleteButton"),m.setAttribute("data-id",t.id.toString()),m.innerHTML='<i class="fas fa-trash-alt"></i>',y.setAttribute("class","btn btn-primary"),y.setAttribute("id","updateButton"),y.setAttribute("data-id",t.id.toString()),y.innerHTML='<i class="fa-solid fa-edit"></i>',u.appendChild(m),p.appendChild(y),e.appendChild(n),e.appendChild(a),e.appendChild(o),e.appendChild(c),h.appendChild(u),h.appendChild(p),h.setAttribute("class","d-flex justify-content-around"),e.appendChild(h),g.appendChild(e),m.addEventListener("click",(async t=>{t.preventDefault(),console.log("Silme"),await s.deleteStudent(Number(m.dataset.id)),T()})),y.addEventListener("click",(e=>{e.preventDefault(),A=t,r.value=A.name,l.value=A.surname,d.style.display="none",i.style.display="block",i.setAttribute("data-id",A.id.toString())}))}))}(),async function(){y.innerHTML="",s.getStudents().forEach((t=>{const e=document.createElement("tr"),n=document.createElement("td"),s=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td"),i=document.createElement("select"),o=document.createElement("option"),c=document.createElement("option");n.innerHTML=t.id.toString(),s.innerText=t.name,a.innerText=t.surname,i.setAttribute("class","form-select"),i.setAttribute("name","selectAbsence"),i.setAttribute("aria-label","select example"),o.setAttribute("value","+"),c.setAttribute("value","-"),o.innerText="+",c.innerText="-",i.appendChild(o),i.appendChild(c),d.appendChild(i),e.appendChild(n),e.appendChild(s),e.appendChild(a),e.appendChild(d),y.appendChild(e)}))}()}async function v(){f.innerHTML="",a.getAttendanceList().forEach((t=>{const e=document.createElement("tr"),n=document.createElement("td"),s=document.createElement("td"),d=document.createElement("td"),i=document.createElement("td"),r=document.createElement("td"),l=document.createElement("td"),p=document.createElement("button"),h=document.createElement("button");n.innerHTML=t.id.toString(),s.innerText=t.today,d.innerText=t.prayerTime,p.setAttribute("class","btn btn-danger"),p.setAttribute("id","deleteButton"),p.setAttribute("data-id",t.id.toString()),p.innerHTML='<i class="fas fa-trash-alt"></i>',h.setAttribute("class","btn btn-primary"),h.setAttribute("id","updateButton"),h.setAttribute("data-id",t.id.toString()),h.innerHTML='<i class="fa-solid fa-edit"></i>',i.appendChild(p),r.appendChild(h),e.appendChild(n),e.appendChild(s),e.appendChild(d),l.appendChild(i),l.appendChild(r),l.setAttribute("class","d-flex justify-content-around"),e.appendChild(l),f.appendChild(e),p.addEventListener("click",(async t=>{t.preventDefault(),console.log("Silme"),await a.deleteAttendance(Number(p.dataset.id)),T(),v()})),h.addEventListener("click",(e=>{e.preventDefault(),b=t.id,u.value=t.prayerTime,c.style.display="block",o.style.display="none",c.setAttribute("data-id",b.toString())}))}))}function w(){const t=a.getAttendanceList();h.innerHTML="";const e=document.createElement("option");e.setAttribute("disabled","disabled"),e.innerText="Lütfen Listelemek İstedğiniz Vakti Seçiniz...",h.appendChild(e),t.forEach((t=>{const e=document.createElement("option");e.setAttribute("value",t.id.toString()),e.innerText=t.today+" "+t.prayerTime,h.appendChild(e),h.addEventListener("change",(t=>{var e;t.preventDefault(),console.log("Seçildi"),console.log(h.value),e=Number(h.value),console.log("Yokalmaya göre Talebe Listeleme"),E.innerHTML="",a.getAttendanceList().forEach((async t=>{if(t.id===e){const n=t;console.log(n);const s=await a.getAttendancesByAttendanceId(e);console.log(s),s.forEach((t=>{const e=document.createElement("tr"),n=document.createElement("td"),s=document.createElement("td"),a=document.createElement("td"),d=document.createElement("td");n.innerHTML=t.getStudent().id.toString(),s.innerHTML=t.getStudent().name,a.innerHTML=t.getStudent().surname,d.innerHTML=t.getIsAbsenceToString(),e.appendChild(n),e.appendChild(s),e.appendChild(a),e.appendChild(d),E.appendChild(e)}))}}))}))}))}async function L(){const t=s.getStudents();m.innerHTML="";const e=document.createElement("option");e.setAttribute("disabled","disabled"),e.innerText="Lütfen Yoklama Sonuçlarını Öğrenmek İstediğiniz Talebeyi Seçiniz....",m.appendChild(e),t.forEach((t=>{const e=document.createElement("option");e.setAttribute("value",t.id.toString()),e.innerText=t.name+" "+t.surname,m.appendChild(e),m.addEventListener("change",(t=>{var e;t.preventDefault(),console.log("Seçildi"),console.log(m.value),e=Number(m.value),console.log("Talebeye göre Yoklama Listeleme"),S.innerHTML="",s.getStudents().forEach((async t=>{if(t.id===e){const n=t;console.log(n);const s=await a.getAttendancesByStudentId(e);console.log(s),s.forEach((t=>{const e=document.createElement("tr"),n=document.createElement("td"),s=document.createElement("td"),a=document.createElement("td");n.innerHTML=t.getAttendance().today,s.innerHTML=t.getAttendance().prayerTime,a.innerHTML=t.getIsAbsenceToString(),e.appendChild(n),e.appendChild(s),e.appendChild(a),S.appendChild(e)}))}}))}))}))}s.fetchStudents().then((()=>{T()})),d.addEventListener("click",(async t=>{t.preventDefault(),console.log("Ekleme"),await s.addStudent(r.value,l.value),r.value="",l.value="",T(),w(),L()})),i.addEventListener("click",(async t=>{t.preventDefault(),console.log("Güncelleme"),await s.updateStudent(A,A.name,A.surname),r.value="",l.value="",d.style.display="block",i.style.display="none",T(),w(),L()})),o.addEventListener("click",(async t=>{t.preventDefault(),console.log("Yoklama alma");const e=new Map;s.getStudents().forEach(((t,n)=>{e.set(t,"+"===p[n].value)})),await a.takeAttendance(u.value,e),console.log(a.getAttendanceList()),T(),w(),L(),v()})),c.addEventListener("click",(async t=>{t.preventDefault(),console.log("Yoklama güncelleme");const e=new Map;s.getStudents().forEach(((t,n)=>{e.set(t,"+"===p[n].value)})),await a.updateAttendance(b,u.value,e),console.log(a.getAttendanceList()),o.style.display="block",c.style.display="none",T(),v()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
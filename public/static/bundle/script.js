(()=>{"use strict";var t={300:(t,e)=>{var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();t.exports=e=n.fetch,n.fetch&&(e.default=n.fetch.bind(n)),e.Headers=n.Headers,e.Request=n.Request,e.Response=n.Response},406:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Student=void 0,e.Student=class{constructor(t,e,n,a){this._id=t,this._name=e,this._surname=n,this._absent=a}getId(){return this._id}getName(){return this._name}getSurname(){return this._surname}getAbsent(){return this._absent}}},287:function(t,e,n){var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.StudentService=void 0;const r=n(406),s=a(n(300));var d="http://localhost:8080/api/v1/students",i=/^[a-zA-ZğüşıöçĞÜŞİÖÇ ]{3,20}$/,o=/^[a-zA-ZğüşıöçĞÜŞİÖÇ ]{2,20}$/;e.StudentService=class{constructor(){this._students=[]}async getStudents(){const t=await(0,s.default)(d,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Error! status: ${t.status}`);const e=await t.json();return this._students=[],e.forEach((t=>{this._students.push(new r.Student(t.id,t.name,t.surname,t.absent))})),this._students}async getStudent(t){const e=await(0,s.default)(d+"/"+t,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`);const n=await e.json(),a=JSON.parse(JSON.stringify(n));return new r.Student(a.getId(),a.getName(),a.getSurname(),a.getAbsent())}async addStudent(t,e){this.validateStudent(t,e);const n=await(0,s.default)(d,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:t,surname:e})});if(!n.ok)throw new Error(`Error! status: ${n.status}`)}async updateStudent(t,e,n){this.validateStudent(e,n);const a=await(0,s.default)(d+"/"+t.getId(),{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({name:e,surname:n})});if(!a.ok)throw new Error(`Error! status: ${a.status}`)}async validateStudent(t,e){if(!this.isValid(t,e))throw new Error("Name or surname is not valid")}async isValid(t,e){return i.test(t)&&o.test(e)}async deleteStudent(t){const e=await(0,s.default)(d+"/"+t,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});if(!e.ok)throw new Error(`Error! status: ${e.status}`)}}},755:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.studentCrud=void 0;const a=new(n(287).StudentService),r=document.getElementById("addStudentButton"),s=document.getElementById("updateStudentButton"),d=document.getElementById("nameInput"),i=document.getElementById("surnameInput"),o=document.getElementById("studentListBody");let u;async function l(){o.innerHTML="",(await a.getStudents()).forEach((t=>{const e=document.createElement("tr"),n=document.createElement("td"),c=document.createElement("td"),p=document.createElement("td"),m=document.createElement("td"),h=document.createElement("td"),f=document.createElement("td"),y=document.createElement("td"),v=document.createElement("button"),g=document.createElement("button");n.innerHTML=t.getId().toString(),c.innerText=t.getName(),p.innerText=t.getSurname(),m.innerText=t.getAbsent().toString(),v.setAttribute("class","btn btn-danger"),v.setAttribute("id","deleteButton"),v.setAttribute("data-id",t.getId().toString()),v.innerHTML='<i class="fas fa-trash-alt"></i>',g.setAttribute("class","btn btn-primary"),g.setAttribute("id","updateButton"),g.setAttribute("data-id",t.getId().toString()),g.innerHTML='<i class="fa-solid fa-edit"></i>',h.appendChild(v),f.appendChild(g),e.appendChild(n),e.appendChild(c),e.appendChild(p),e.appendChild(m),y.appendChild(h),y.appendChild(f),y.setAttribute("class","d-flex justify-content-around"),e.appendChild(y),o.appendChild(e),v.addEventListener("click",(async t=>{t.preventDefault(),console.log("Silme"),await a.deleteStudent(Number(v.dataset.id)),l(),alert("Öğrenci Silindi")})),g.addEventListener("click",(e=>{e.preventDefault(),u=t,d.value=u.getName(),i.value=u.getSurname(),g.style.display="none",v.style.display="none",s.style.display="block",r.style.display="none",s.setAttribute("data-id",u.getId().toString())}))}))}e.studentCrud=function(){l(),r.addEventListener("click",(async t=>{t.preventDefault(),console.log("Ekleme");try{await a.addStudent(d.value,i.value),l(),alert(d.value+" "+i.value+"\nÖğrenci Eklendi"),d.value="",i.value=""}catch(t){alert("Talebe ADI ve SOYADI uygun formatta değil\n3-20 karakter arası sadece harf giriniz\nÖrnek: Bektaş Işık")}})),s.addEventListener("click",(async t=>{t.preventDefault(),console.log("Güncelleme");try{await a.updateStudent(u,d.value,i.value),d.value="",i.value="",r.style.display="block",s.style.display="none",l(),alert("Öğrenci Güncellendi")}catch(t){alert("Talebe ADI ve SOYADI uygun formatta değil\n3-20 karakter arası sadece harf giriniz\nÖrnek: Bektaş Işık")}}))}}},e={};(0,function n(a){var r=e[a];if(void 0!==r)return r.exports;var s=e[a]={exports:{}};return t[a].call(s.exports,s,s.exports,n),s.exports}(755).studentCrud)()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,